

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Mar 02 02:35:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  000A                     	;# 
    47  000B                     	;# 
    48  000C                     	;# 
    49  000D                     	;# 
    50  000E                     	;# 
    51  000E                     	;# 
    52  000F                     	;# 
    53  0010                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0013                     	;# 
    57  0014                     	;# 
    58  0015                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001E                     	;# 
    66  001F                     	;# 
    67  0081                     	;# 
    68  0085                     	;# 
    69  0086                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  008F                     	;# 
    74  0090                     	;# 
    75  0092                     	;# 
    76  0093                     	;# 
    77  0094                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  0105                     	;# 
    86  010C                     	;# 
    87  010D                     	;# 
    88  010E                     	;# 
    89  010F                     	;# 
    90  018C                     	;# 
    91  018D                     	;# 
    92                           
    93                           	psect	strings
    94  0800                     __pstrings:	
    95  0800                     stringtab:	
    96  0800                     __stringtab:	
    97  0800                     stringcode:	
    98                           ;	String table - string pointers are 1 byte each
    99                           
   100  0800                     stringdir:	
   101  0800  3008               	movlw	high stringdir
   102  0801  008A               	movwf	10
   103  0802  0804               	movf	4,w
   104  0803  0A84               	incf	4,f
   105  0804  0782               	addwf	2,f
   106  0805                     __stringbase:	
   107  0805  3400               	retlw	0
   108  0806                     __end_of__stringtab:	
   109  0806                     _dpowers:	
   110  0806  3401               	retlw	1
   111  0807  3400               	retlw	0
   112  0808  3400               	retlw	0
   113  0809  3400               	retlw	0
   114  080A  340A               	retlw	10
   115  080B  3400               	retlw	0
   116  080C  3400               	retlw	0
   117  080D  3400               	retlw	0
   118  080E  3464               	retlw	100
   119  080F  3400               	retlw	0
   120  0810  3400               	retlw	0
   121  0811  3400               	retlw	0
   122  0812  34E8               	retlw	232
   123  0813  3403               	retlw	3
   124  0814  3400               	retlw	0
   125  0815  3400               	retlw	0
   126  0816  3410               	retlw	16
   127  0817  3427               	retlw	39
   128  0818  3400               	retlw	0
   129  0819  3400               	retlw	0
   130  081A  34A0               	retlw	160
   131  081B  3486               	retlw	134
   132  081C  3401               	retlw	1
   133  081D  3400               	retlw	0
   134  081E  3440               	retlw	64
   135  081F  3442               	retlw	66
   136  0820  340F               	retlw	15
   137  0821  3400               	retlw	0
   138  0822  3480               	retlw	128
   139  0823  3496               	retlw	150
   140  0824  3498               	retlw	152
   141  0825  3400               	retlw	0
   142  0826  3400               	retlw	0
   143  0827  34E1               	retlw	225
   144  0828  34F5               	retlw	245
   145  0829  3405               	retlw	5
   146  082A  3400               	retlw	0
   147  082B  34CA               	retlw	202
   148  082C  349A               	retlw	154
   149  082D  343B               	retlw	59
   150  082E                     __end_of_dpowers:	
   151  001F                     _ADCON0bits	set	31
   152  001E                     _ADRESH	set	30
   153  0005                     _PORTA	set	5
   154  0006                     _PORTB	set	6
   155  0006                     _PORTBbits	set	6
   156  009F                     _ADCON1	set	159
   157  009F                     _ADCON1bits	set	159
   158  009E                     _ADRESL	set	158
   159  009B                     _ANSEL	set	155
   160  008F                     _OSCCONbits	set	143
   161  0085                     _TRISAbits	set	133
   162  0086                     _TRISBbits	set	134
   163  082E                     __stringdata:	
   164  082E                     STR_1:	
   165  082E  3425               	retlw	37	;'%'
   166  082F  346C               	retlw	108	;'l'
   167  0830  3475               	retlw	117	;'u'
   168  0831  342E               	retlw	46	;'.'
   169  0832  3425               	retlw	37	;'%'
   170  0833  3436               	retlw	54	;'6'
   171  0834  342E               	retlw	46	;'.'
   172  0835  3436               	retlw	54	;'6'
   173  0836  346C               	retlw	108	;'l'
   174  0837  3475               	retlw	117	;'u'
   175  0838  3400               	retlw	0
   176  0839                     __end_of__stringdata:	
   177                           
   178                           ; #config settings
   179  0000                     
   180                           	psect	cinit
   181  07F7                     start_initialization:	
   182  07F7                     __initialization:	
   183                           
   184                           ; Clear objects allocated to BANK1
   185  07F7  1383               	bcf	3,7	;select IRP bank0
   186  07F8  30A0               	movlw	low __pbssBANK1
   187  07F9  0084               	movwf	4
   188  07FA  30B1               	movlw	low (__pbssBANK1+17)
   189  07FB  158A  2612         	fcall	clear_ram0
   190  07FD                     end_of_initialization:	
   191                           ;End of C runtime variable initialization code
   192                           
   193  07FD                     __end_of__initialization:	
   194  07FD  0183               	clrf	3
   195  07FE  118A  2AA9         	ljmp	_main	;jump to C main() function
   196                           
   197                           	psect	bssBANK1
   198  00A0                     __pbssBANK1:	
   199  00A0                     ftoa@buf:	
   200  00A0                     	ds	17
   201                           
   202                           	psect	clrtext
   203  0E12                     clear_ram0:	
   204                           ;	Called with FSR containing the base address, and
   205                           ;	W with the last address+1
   206                           
   207  0E12  0064               	clrwdt	;clear the watchdog before getting into this loop
   208  0E13                     clrloop0:	
   209  0E13  0180               	clrf	0	;clear RAM location pointed to by FSR
   210  0E14  0A84               	incf	4,f	;increment pointer
   211  0E15  0604               	xorwf	4,w	;XOR with final address
   212  0E16  1903               	btfsc	3,2	;have we reached the end yet?
   213  0E17  3400               	retlw	0	;all done for this memory range, return
   214  0E18  0604               	xorwf	4,w	;XOR again to restore value
   215  0E19  2E13               	goto	clrloop0	;do the next byte
   216                           
   217                           	psect	cstackCOMMON
   218  0070                     __pcstackCOMMON:	
   219  0070                     ?_isdigit:	
   220  0070                     ??_isdigit:	
   221                           ; 1 bit 
   222                           
   223  0070                     ?_initADC:	
   224                           ; 0 bytes @ 0x0
   225                           
   226  0070                     ??_initADC:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ?_initADCConversion:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ??_initADCConversion:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_Lcd_Port:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ??_Lcd_Port:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_Lcd_Cmd:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_Lcd_Init:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?_Lcd_Write_Char:	
   248                           ; 0 bytes @ 0x0
   249                           
   250  0070                     ?_Lcd_Write_String:	
   251                           ; 0 bytes @ 0x0
   252                           
   253  0070                     ?_main:	
   254                           ; 0 bytes @ 0x0
   255                           
   256  0070                     ?___ftge:	
   257                           ; 0 bytes @ 0x0
   258                           
   259  0070                     ?_isADCConversionReady:	
   260                           ; 1 bit 
   261                           
   262  0070                     ?_getADC10bitResult:	
   263                           ; 2 bytes @ 0x0
   264                           
   265  0070                     ?_Lcd_Clear:	
   266                           ; 2 bytes @ 0x0
   267                           
   268  0070                     ?___wmul:	
   269                           ; 2 bytes @ 0x0
   270                           
   271  0070                     ?___ftpack:	
   272                           ; 2 bytes @ 0x0
   273                           
   274  0070                     ?___ftneg:	
   275                           ; 3 bytes @ 0x0
   276                           
   277  0070                     ?___lldiv:	
   278                           ; 3 bytes @ 0x0
   279                           
   280  0070                     Lcd_Port@a:	
   281                           ; 4 bytes @ 0x0
   282                           
   283  0070                     _isdigit$519:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ___wmul@multiplier:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ___ftpack@arg:	
   290                           ; 2 bytes @ 0x0
   291                           
   292  0070                     ___ftge@ff1:	
   293                           ; 3 bytes @ 0x0
   294                           
   295  0070                     ___ftneg@f1:	
   296                           ; 3 bytes @ 0x0
   297                           
   298  0070                     ___lldiv@divisor:	
   299                           ; 3 bytes @ 0x0
   300                           
   301                           
   302                           ; 4 bytes @ 0x0
   303  0070                     	ds	1
   304  0071                     ??_Lcd_Cmd:	
   305  0071                     ??_Lcd_Write_Char:	
   306                           ; 0 bytes @ 0x1
   307                           
   308  0071                     isdigit@c:	
   309                           ; 0 bytes @ 0x1
   310                           
   311                           
   312                           ; 1 bytes @ 0x1
   313  0071                     	ds	1
   314  0072                     ??_isADCConversionReady:	
   315  0072                     ??_getADC10bitResult:	
   316                           ; 0 bytes @ 0x2
   317                           
   318  0072                     Lcd_Write_Char@temp:	
   319                           ; 0 bytes @ 0x2
   320                           
   321  0072                     ___wmul@multiplicand:	
   322                           ; 1 bytes @ 0x2
   323                           
   324                           
   325                           ; 2 bytes @ 0x2
   326  0072                     	ds	1
   327  0073                     ??___ftneg:	
   328  0073                     getADC10bitResult@adresl:	
   329                           ; 0 bytes @ 0x3
   330                           
   331  0073                     Lcd_Cmd@a:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     Lcd_Write_Char@y:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     ___ftpack@exp:	
   338                           ; 1 bytes @ 0x3
   339                           
   340  0073                     ___ftge@ff2:	
   341                           ; 1 bytes @ 0x3
   342                           
   343                           
   344                           ; 3 bytes @ 0x3
   345  0073                     	ds	1
   346  0074                     ??_Lcd_Clear:	
   347  0074                     ?_Lcd_Set_Cursor:	
   348                           ; 0 bytes @ 0x4
   349                           
   350  0074                     ??_Lcd_Init:	
   351                           ; 0 bytes @ 0x4
   352                           
   353  0074                     ??___wmul:	
   354                           ; 0 bytes @ 0x4
   355                           
   356  0074                     getADC10bitResult@adresh:	
   357                           ; 0 bytes @ 0x4
   358                           
   359  0074                     Lcd_Set_Cursor@b:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     Lcd_Write_Char@a:	
   363                           ; 1 bytes @ 0x4
   364                           
   365  0074                     ___ftpack@sign:	
   366                           ; 1 bytes @ 0x4
   367                           
   368  0074                     ___wmul@product:	
   369                           ; 1 bytes @ 0x4
   370                           
   371  0074                     ___lldiv@dividend:	
   372                           ; 2 bytes @ 0x4
   373                           
   374                           
   375                           ; 4 bytes @ 0x4
   376  0074                     	ds	1
   377  0075                     ??___ftpack:	
   378  0075                     ??_Lcd_Set_Cursor:	
   379                           ; 0 bytes @ 0x5
   380                           
   381  0075                     ??_Lcd_Write_String:	
   382                           ; 0 bytes @ 0x5
   383                           
   384  0075                     getADC10bitResult@result:	
   385                           ; 0 bytes @ 0x5
   386                           
   387                           
   388                           ; 2 bytes @ 0x5
   389  0075                     	ds	1
   390  0076                     ??___ftge:	
   391  0076                     Lcd_Write_String@i:	
   392                           ; 0 bytes @ 0x6
   393                           
   394                           
   395                           ; 2 bytes @ 0x6
   396  0076                     	ds	1
   397  0077                     Lcd_Set_Cursor@a:	
   398                           
   399                           ; 1 bytes @ 0x7
   400  0077                     	ds	1
   401  0078                     ??___lldiv:	
   402  0078                     ?___awtoft:	
   403                           ; 0 bytes @ 0x8
   404                           
   405  0078                     ?___ftadd:	
   406                           ; 3 bytes @ 0x8
   407                           
   408  0078                     ?___lltoft:	
   409                           ; 3 bytes @ 0x8
   410                           
   411  0078                     Lcd_Set_Cursor@z:	
   412                           ; 3 bytes @ 0x8
   413                           
   414  0078                     Lcd_Write_String@a:	
   415                           ; 1 bytes @ 0x8
   416                           
   417  0078                     ___awtoft@c:	
   418                           ; 1 bytes @ 0x8
   419                           
   420  0078                     ___ftadd@f1:	
   421                           ; 2 bytes @ 0x8
   422                           
   423  0078                     ___lltoft@c:	
   424                           ; 3 bytes @ 0x8
   425                           
   426                           
   427                           ; 4 bytes @ 0x8
   428  0078                     	ds	1
   429  0079                     Lcd_Set_Cursor@y:	
   430  0079                     ___lldiv@quotient:	
   431                           ; 1 bytes @ 0x9
   432                           
   433                           
   434                           ; 4 bytes @ 0x9
   435  0079                     	ds	1
   436  007A                     Lcd_Set_Cursor@temp:	
   437                           
   438                           ; 1 bytes @ 0xA
   439  007A                     	ds	1
   440  007B                     ??___awtoft:	
   441  007B                     ___ftadd@f2:	
   442                           ; 0 bytes @ 0xB
   443                           
   444                           
   445                           ; 3 bytes @ 0xB
   446  007B                     	ds	1
   447  007C                     ??___lltoft:	
   448                           
   449                           ; 0 bytes @ 0xC
   450  007C                     	ds	1
   451  007D                     ___awtoft@sign:	
   452  007D                     ___lldiv@counter:	
   453                           ; 1 bytes @ 0xD
   454                           
   455  007D                     ___lltoft@exp:	
   456                           ; 1 bytes @ 0xD
   457                           
   458                           
   459                           ; 1 bytes @ 0xD
   460  007D                     	ds	1
   461  007E                     ??_main:	
   462  007E                     ??___ftsub:	
   463                           ; 0 bytes @ 0xE
   464                           
   465                           
   466                           	psect	cstackBANK0
   467  0020                     __pcstackBANK0:	
   468                           ; 0 bytes @ 0xE
   469                           
   470  0020                     ??___ftadd:	
   471  0020                     ?___ftmul:	
   472                           ; 0 bytes @ 0x0
   473                           
   474  0020                     ?___llmod:	
   475                           ; 3 bytes @ 0x0
   476                           
   477  0020                     ___ftmul@f1:	
   478                           ; 4 bytes @ 0x0
   479                           
   480  0020                     ___llmod@divisor:	
   481                           ; 3 bytes @ 0x0
   482                           
   483                           
   484                           ; 4 bytes @ 0x0
   485  0020                     	ds	3
   486  0023                     ___ftmul@f2:	
   487                           
   488                           ; 3 bytes @ 0x3
   489  0023                     	ds	1
   490  0024                     ___ftadd@sign:	
   491  0024                     ___llmod@dividend:	
   492                           ; 1 bytes @ 0x4
   493                           
   494                           
   495                           ; 4 bytes @ 0x4
   496  0024                     	ds	1
   497  0025                     ___ftadd@exp2:	
   498                           
   499                           ; 1 bytes @ 0x5
   500  0025                     	ds	1
   501  0026                     ??___ftmul:	
   502  0026                     ___ftadd@exp1:	
   503                           ; 0 bytes @ 0x6
   504                           
   505                           
   506                           ; 1 bytes @ 0x6
   507  0026                     	ds	1
   508  0027                     ?___ftdiv:	
   509  0027                     ?___ftsub:	
   510                           ; 3 bytes @ 0x7
   511                           
   512  0027                     ___ftdiv@f2:	
   513                           ; 3 bytes @ 0x7
   514                           
   515  0027                     ___ftsub@f2:	
   516                           ; 3 bytes @ 0x7
   517                           
   518                           
   519                           ; 3 bytes @ 0x7
   520  0027                     	ds	1
   521  0028                     ??___llmod:	
   522                           
   523                           ; 0 bytes @ 0x8
   524  0028                     	ds	1
   525  0029                     ___llmod@counter:	
   526                           
   527                           ; 1 bytes @ 0x9
   528  0029                     	ds	1
   529  002A                     ?_sprintf:	
   530  002A                     sprintf@f:	
   531                           ; 2 bytes @ 0xA
   532                           
   533  002A                     ___ftmul@exp:	
   534                           ; 1 bytes @ 0xA
   535                           
   536  002A                     ___ftdiv@f1:	
   537                           ; 1 bytes @ 0xA
   538                           
   539  002A                     ___ftsub@f1:	
   540                           ; 3 bytes @ 0xA
   541                           
   542                           
   543                           ; 3 bytes @ 0xA
   544  002A                     	ds	1
   545  002B                     ___ftmul@f3_as_product:	
   546                           
   547                           ; 3 bytes @ 0xB
   548  002B                     	ds	2
   549  002D                     ??___ftdiv:	
   550                           
   551                           ; 0 bytes @ 0xD
   552  002D                     	ds	1
   553  002E                     ___ftmul@cntr:	
   554                           
   555                           ; 1 bytes @ 0xE
   556  002E                     	ds	1
   557  002F                     ___ftmul@sign:	
   558                           
   559                           ; 1 bytes @ 0xF
   560  002F                     	ds	1
   561  0030                     ?___fttol:	
   562  0030                     ___fttol@f1:	
   563                           ; 4 bytes @ 0x10
   564                           
   565                           
   566                           ; 3 bytes @ 0x10
   567  0030                     	ds	1
   568  0031                     ___ftdiv@cntr:	
   569                           
   570                           ; 1 bytes @ 0x11
   571  0031                     	ds	1
   572  0032                     ___ftdiv@f3:	
   573                           
   574                           ; 3 bytes @ 0x12
   575  0032                     	ds	1
   576  0033                     ??_sprintf:	
   577                           
   578                           ; 0 bytes @ 0x13
   579  0033                     	ds	1
   580  0034                     ??___fttol:	
   581                           
   582                           ; 0 bytes @ 0x14
   583  0034                     	ds	1
   584  0035                     ___ftdiv@exp:	
   585                           
   586                           ; 1 bytes @ 0x15
   587  0035                     	ds	1
   588  0036                     ___ftdiv@sign:	
   589                           
   590                           ; 1 bytes @ 0x16
   591  0036                     	ds	2
   592  0038                     sprintf@flag:	
   593  0038                     ___fttol@sign1:	
   594                           ; 1 bytes @ 0x18
   595                           
   596                           
   597                           ; 1 bytes @ 0x18
   598  0038                     	ds	1
   599  0039                     sprintf@ap:	
   600  0039                     ___fttol@lval:	
   601                           ; 1 bytes @ 0x19
   602                           
   603                           
   604                           ; 4 bytes @ 0x19
   605  0039                     	ds	1
   606  003A                     sprintf@_val:	
   607                           
   608                           ; 4 bytes @ 0x1A
   609  003A                     	ds	3
   610  003D                     ___fttol@exp1:	
   611                           
   612                           ; 1 bytes @ 0x1D
   613  003D                     	ds	1
   614  003E                     sprintf@sp:	
   615                           
   616                           ; 1 bytes @ 0x1E
   617  003E                     	ds	1
   618  003F                     sprintf@width:	
   619                           
   620                           ; 2 bytes @ 0x1F
   621  003F                     	ds	2
   622  0041                     sprintf@prec:	
   623                           
   624                           ; 2 bytes @ 0x21
   625  0041                     	ds	2
   626  0043                     sprintf@c:	
   627                           
   628                           ; 1 bytes @ 0x23
   629  0043                     	ds	1
   630  0044                     ?_ftoa:	
   631  0044                     ftoa@f:	
   632                           ; 1 bytes @ 0x24
   633                           
   634                           
   635                           ; 3 bytes @ 0x24
   636  0044                     	ds	3
   637  0047                     ftoa@status:	
   638                           
   639                           ; 1 bytes @ 0x27
   640  0047                     	ds	1
   641  0048                     ??_ftoa:	
   642                           
   643                           ; 0 bytes @ 0x28
   644  0048                     	ds	1
   645  0049                     ftoa@rem:	
   646                           
   647                           ; 4 bytes @ 0x29
   648  0049                     	ds	4
   649  004D                     ftoa@l:	
   650                           
   651                           ; 4 bytes @ 0x2D
   652  004D                     	ds	4
   653  0051                     ftoa@cp:	
   654                           
   655                           ; 1 bytes @ 0x31
   656  0051                     	ds	1
   657  0052                     main@minValue:	
   658                           
   659                           ; 3 bytes @ 0x32
   660  0052                     	ds	3
   661  0055                     main@maxValue:	
   662                           
   663                           ; 3 bytes @ 0x35
   664  0055                     	ds	3
   665  0058                     main@unitValue:	
   666                           
   667                           ; 3 bytes @ 0x38
   668  0058                     	ds	3
   669  005B                     main@currentValue:	
   670                           
   671                           ; 3 bytes @ 0x3B
   672  005B                     	ds	3
   673  005E                     main@result:	
   674                           
   675                           ; 2 bytes @ 0x3E
   676  005E                     	ds	2
   677                           
   678                           	psect	maintext
   679  02A9                     __pmaintext:	
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 30 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  currentValue    3   59[BANK0 ] float 
   690 ;;  unitValue       3   56[BANK0 ] float 
   691 ;;  maxValue        3   53[BANK0 ] float 
   692 ;;  minValue        3   50[BANK0 ] float 
   693 ;;  result          2   62[BANK0 ] int 
   694 ;; Return value:  Size  Location     Type
   695 ;;		None               void
   696 ;; Registers used:
   697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 17F/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   703 ;;      Params:         0       0       0       0       0
   704 ;;      Locals:         0      14       0       0       0
   705 ;;      Temps:          0       0       0       0       0
   706 ;;      Totals:         0      14       0       0       0
   707 ;;Total ram usage:       14 bytes
   708 ;; Hardware stack levels required when called:    4
   709 ;; This function calls:
   710 ;;		_Lcd_Clear
   711 ;;		_Lcd_Init
   712 ;;		_Lcd_Set_Cursor
   713 ;;		_Lcd_Write_String
   714 ;;		___awtoft
   715 ;;		___ftadd
   716 ;;		___ftdiv
   717 ;;		___ftmul
   718 ;;		___ftneg
   719 ;;		_ftoa
   720 ;;		_getADC10bitResult
   721 ;;		_initADC
   722 ;;		_initADCConversion
   723 ;;		_isADCConversionReady
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           
   730                           ;psect for function _main
   731  02A9                     _main:	
   732                           
   733                           ;main.c: 32: OSCCONbits.IRCF = 0b111;
   734                           
   735                           ;incstack = 0
   736                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   737  02A9  3070               	movlw	112
   738  02AA  1683               	bsf	3,5	;RP0=1, select bank1
   739  02AB  1303               	bcf	3,6	;RP1=0, select bank1
   740  02AC  048F               	iorwf	15,f	;volatile
   741                           
   742                           ;main.c: 36: PORTA = 0x00;
   743  02AD  1283               	bcf	3,5	;RP0=0, select bank0
   744  02AE  1303               	bcf	3,6	;RP1=0, select bank0
   745  02AF  0185               	clrf	5	;volatile
   746                           
   747                           ;main.c: 37: TRISAbits.TRISA0 = 1;
   748  02B0  1683               	bsf	3,5	;RP0=1, select bank1
   749  02B1  1303               	bcf	3,6	;RP1=0, select bank1
   750  02B2  1405               	bsf	5,0	;volatile
   751                           
   752                           ;main.c: 38: TRISAbits.TRISA1 = 1;
   753  02B3  1485               	bsf	5,1	;volatile
   754                           
   755                           ;main.c: 39: TRISAbits.TRISA2 = 1;
   756  02B4  1505               	bsf	5,2	;volatile
   757                           
   758                           ;main.c: 40: TRISAbits.TRISA3 = 1;
   759  02B5  1585               	bsf	5,3	;volatile
   760                           
   761                           ;main.c: 41: TRISAbits.TRISA4 = 1;
   762  02B6  1605               	bsf	5,4	;volatile
   763                           
   764                           ;main.c: 42: TRISAbits.TRISA5 = 1;
   765  02B7  1685               	bsf	5,5	;volatile
   766                           
   767                           ;main.c: 43: TRISAbits.TRISA6 = 1;
   768  02B8  1705               	bsf	5,6	;volatile
   769                           
   770                           ;main.c: 44: TRISAbits.TRISA7 = 1;
   771  02B9  1785               	bsf	5,7	;volatile
   772                           
   773                           ;main.c: 46: PORTB = 0x00;
   774  02BA  1283               	bcf	3,5	;RP0=0, select bank0
   775  02BB  1303               	bcf	3,6	;RP1=0, select bank0
   776  02BC  0186               	clrf	6	;volatile
   777                           
   778                           ;main.c: 48: TRISBbits.TRISB0 = 0;
   779  02BD  1683               	bsf	3,5	;RP0=1, select bank1
   780  02BE  1303               	bcf	3,6	;RP1=0, select bank1
   781  02BF  1006               	bcf	6,0	;volatile
   782                           
   783                           ;main.c: 49: TRISBbits.TRISB1 = 0;
   784  02C0  1086               	bcf	6,1	;volatile
   785                           
   786                           ;main.c: 50: TRISBbits.TRISB2 = 0;
   787  02C1  1106               	bcf	6,2	;volatile
   788                           
   789                           ;main.c: 51: TRISBbits.TRISB3 = 0;
   790  02C2  1186               	bcf	6,3	;volatile
   791                           
   792                           ;main.c: 52: TRISBbits.TRISB4 = 0;
   793  02C3  1206               	bcf	6,4	;volatile
   794                           
   795                           ;main.c: 53: TRISBbits.TRISB5 = 0;
   796  02C4  1286               	bcf	6,5	;volatile
   797                           
   798                           ;main.c: 54: TRISBbits.TRISB6 = 0;
   799  02C5  1306               	bcf	6,6	;volatile
   800                           
   801                           ;main.c: 55: TRISBbits.TRISB7 = 0;
   802  02C6  1386               	bcf	6,7	;volatile
   803                           
   804                           ;main.c: 58: initADC();
   805  02C7  158A  2634  118A   	fcall	_initADC
   806                           
   807                           ;main.c: 59: Lcd_Init();
   808  02CA  118A  2007  118A   	fcall	_Lcd_Init
   809  02CD                     l1945:	
   810                           ;main.c: 63: while(1) {
   811                           
   812                           
   813                           ;main.c: 65: initADCConversion();
   814  02CD  118A  2003  118A   	fcall	_initADCConversion
   815  02D0                     l1947:	
   816                           ;main.c: 67: ;
   817                           
   818                           ;main.c: 66: while(isADCConversionReady() == 0) {
   819                           
   820  02D0  158A  261A  118A   	fcall	_isADCConversionReady
   821  02D3  0871               	movf	?_isADCConversionReady+1,w
   822  02D4  0470               	iorwf	?_isADCConversionReady,w
   823  02D5  1903               	skipnz
   824  02D6  2AD0               	goto	l1947
   825                           
   826                           ;main.c: 68: }
   827                           ;main.c: 69: int result = getADC10bitResult();
   828  02D7  158A  2695  118A   	fcall	_getADC10bitResult
   829  02DA  0871               	movf	?_getADC10bitResult+1,w
   830  02DB  1283               	bcf	3,5	;RP0=0, select bank0
   831  02DC  1303               	bcf	3,6	;RP1=0, select bank0
   832  02DD  01DF               	clrf	main@result+1
   833  02DE  07DF               	addwf	main@result+1,f
   834  02DF  0870               	movf	?_getADC10bitResult,w
   835  02E0  01DE               	clrf	main@result
   836  02E1  07DE               	addwf	main@result,f
   837                           
   838                           ;main.c: 72: float minValue = 0.0;
   839  02E2  3000               	movlw	0
   840  02E3  00D2               	movwf	main@minValue
   841  02E4  3000               	movlw	0
   842  02E5  00D3               	movwf	main@minValue+1
   843  02E6  3000               	movlw	0
   844  02E7  00D4               	movwf	main@minValue+2
   845                           
   846                           ;main.c: 73: float maxValue = 5.0;
   847  02E8  3000               	movlw	0
   848  02E9  00D5               	movwf	main@maxValue
   849  02EA  30A0               	movlw	160
   850  02EB  00D6               	movwf	main@maxValue+1
   851  02EC  3040               	movlw	64
   852  02ED  00D7               	movwf	main@maxValue+2
   853                           
   854                           ;main.c: 74: float unitValue = (maxValue-minValue)/1024;
   855  02EE  3000               	movlw	0
   856  02EF  00A7               	movwf	___ftdiv@f2
   857  02F0  3080               	movlw	128
   858  02F1  00A8               	movwf	___ftdiv@f2+1
   859  02F2  3044               	movlw	68
   860  02F3  00A9               	movwf	___ftdiv@f2+2
   861  02F4  0855               	movf	main@maxValue,w
   862  02F5  00F8               	movwf	___ftadd@f1
   863  02F6  0856               	movf	main@maxValue+1,w
   864  02F7  00F9               	movwf	___ftadd@f1+1
   865  02F8  0857               	movf	main@maxValue+2,w
   866  02F9  00FA               	movwf	___ftadd@f1+2
   867  02FA  0852               	movf	main@minValue,w
   868  02FB  00F0               	movwf	___ftneg@f1
   869  02FC  0853               	movf	main@minValue+1,w
   870  02FD  00F1               	movwf	___ftneg@f1+1
   871  02FE  0854               	movf	main@minValue+2,w
   872  02FF  00F2               	movwf	___ftneg@f1+2
   873  0300  158A  260A  118A   	fcall	___ftneg
   874  0303  0870               	movf	?___ftneg,w
   875  0304  00FB               	movwf	___ftadd@f2
   876  0305  0871               	movf	?___ftneg+1,w
   877  0306  00FC               	movwf	___ftadd@f2+1
   878  0307  0872               	movf	?___ftneg+2,w
   879  0308  00FD               	movwf	___ftadd@f2+2
   880  0309  118A  24E3  118A   	fcall	___ftadd
   881  030C  0878               	movf	?___ftadd,w
   882  030D  1283               	bcf	3,5	;RP0=0, select bank0
   883  030E  1303               	bcf	3,6	;RP1=0, select bank0
   884  030F  00AA               	movwf	___ftdiv@f1
   885  0310  0879               	movf	?___ftadd+1,w
   886  0311  00AB               	movwf	___ftdiv@f1+1
   887  0312  087A               	movf	?___ftadd+2,w
   888  0313  00AC               	movwf	___ftdiv@f1+2
   889  0314  118A  235A  118A   	fcall	___ftdiv
   890  0317  1283               	bcf	3,5	;RP0=0, select bank0
   891  0318  1303               	bcf	3,6	;RP1=0, select bank0
   892  0319  0827               	movf	?___ftdiv,w
   893  031A  00D8               	movwf	main@unitValue
   894  031B  0828               	movf	?___ftdiv+1,w
   895  031C  00D9               	movwf	main@unitValue+1
   896  031D  0829               	movf	?___ftdiv+2,w
   897  031E  00DA               	movwf	main@unitValue+2
   898                           
   899                           ;main.c: 77: float currentValue = result * unitValue;
   900  031F  0858               	movf	main@unitValue,w
   901  0320  00A0               	movwf	___ftmul@f1
   902  0321  0859               	movf	main@unitValue+1,w
   903  0322  00A1               	movwf	___ftmul@f1+1
   904  0323  085A               	movf	main@unitValue+2,w
   905  0324  00A2               	movwf	___ftmul@f1+2
   906  0325  085F               	movf	main@result+1,w
   907  0326  01F9               	clrf	___awtoft@c+1
   908  0327  07F9               	addwf	___awtoft@c+1,f
   909  0328  085E               	movf	main@result,w
   910  0329  01F8               	clrf	___awtoft@c
   911  032A  07F8               	addwf	___awtoft@c,f
   912  032B  158A  26CD  118A   	fcall	___awtoft
   913  032E  0878               	movf	?___awtoft,w
   914  032F  1283               	bcf	3,5	;RP0=0, select bank0
   915  0330  1303               	bcf	3,6	;RP1=0, select bank0
   916  0331  00A3               	movwf	___ftmul@f2
   917  0332  0879               	movf	?___awtoft+1,w
   918  0333  00A4               	movwf	___ftmul@f2+1
   919  0334  087A               	movf	?___awtoft+2,w
   920  0335  00A5               	movwf	___ftmul@f2+2
   921  0336  118A  2411  118A   	fcall	___ftmul
   922  0339  1283               	bcf	3,5	;RP0=0, select bank0
   923  033A  1303               	bcf	3,6	;RP1=0, select bank0
   924  033B  0820               	movf	?___ftmul,w
   925  033C  00DB               	movwf	main@currentValue
   926  033D  0821               	movf	?___ftmul+1,w
   927  033E  00DC               	movwf	main@currentValue+1
   928  033F  0822               	movf	?___ftmul+2,w
   929  0340  00DD               	movwf	main@currentValue+2
   930                           
   931                           ;main.c: 83: Lcd_Clear();
   932  0341  158A  2602  118A   	fcall	_Lcd_Clear
   933                           
   934                           ;main.c: 84: Lcd_Set_Cursor(1,1);
   935  0344  01F4               	clrf	Lcd_Set_Cursor@b
   936  0345  0AF4               	incf	Lcd_Set_Cursor@b,f
   937  0346  3001               	movlw	1
   938  0347  158A  276D  118A   	fcall	_Lcd_Set_Cursor
   939                           
   940                           ;main.c: 85: Lcd_Write_String(ftoa(currentValue, (int *) 0));
   941  034A  1283               	bcf	3,5	;RP0=0, select bank0
   942  034B  1303               	bcf	3,6	;RP1=0, select bank0
   943  034C  085B               	movf	main@currentValue,w
   944  034D  00C4               	movwf	ftoa@f
   945  034E  085C               	movf	main@currentValue+1,w
   946  034F  00C5               	movwf	ftoa@f+1
   947  0350  085D               	movf	main@currentValue+2,w
   948  0351  00C6               	movwf	ftoa@f+2
   949  0352  01C7               	clrf	ftoa@status
   950  0353  118A  21FE  118A   	fcall	_ftoa
   951  0356  158A  26B0  118A   	fcall	_Lcd_Write_String
   952  0359  2ACD               	goto	l1945
   953  035A                     __end_of_main:	
   954                           
   955                           	psect	text1
   956  0E1A                     __ptext1:	
   957 ;; *************** function _isADCConversionReady *****************
   958 ;; Defined at:
   959 ;;		line 102 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\ADC.h"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  2    0[COMMON] int 
   966 ;; Registers used:
   967 ;;		wreg, status,2
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   973 ;;      Params:         2       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0
   976 ;;      Totals:         2       0       0       0       0
   977 ;;Total ram usage:        2 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; This function calls:
   980 ;;		Nothing
   981 ;; This function is called by:
   982 ;;		_main
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           
   987                           ;psect for function _isADCConversionReady
   988  0E1A                     _isADCConversionReady:	
   989                           
   990                           ;ADC.h: 103: if(ADCON0bits.GO_DONE == 0) return 1;
   991                           
   992                           ;incstack = 0
   993                           ; Regs used in _isADCConversionReady: [wreg+status,2]
   994  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
   995  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
   996  0E1C  191F               	btfsc	31,2	;volatile
   997  0E1D  2E23               	goto	l1771
   998  0E1E  3001               	movlw	1
   999  0E1F  00F0               	movwf	?_isADCConversionReady
  1000  0E20  3000               	movlw	0
  1001  0E21  00F1               	movwf	?_isADCConversionReady+1
  1002  0E22  0008               	return
  1003  0E23                     l1771:	
  1004                           
  1005                           ;ADC.h: 104: return 0;
  1006  0E23  01F0               	clrf	?_isADCConversionReady
  1007  0E24  01F1               	clrf	?_isADCConversionReady+1
  1008  0E25  0008               	return
  1009  0E26                     __end_of_isADCConversionReady:	
  1010                           
  1011                           	psect	text2
  1012  0003                     __ptext2:	
  1013 ;; *************** function _initADCConversion *****************
  1014 ;; Defined at:
  1015 ;;		line 99 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\ADC.h"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;		None               void
  1022 ;; Registers used:
  1023 ;;		None
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1029 ;;      Params:         0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0
  1032 ;;      Totals:         0       0       0       0       0
  1033 ;;Total ram usage:        0 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; This function calls:
  1036 ;;		Nothing
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function _initADCConversion
  1044  0003                     _initADCConversion:	
  1045                           
  1046                           ;ADC.h: 100: ADCON0bits.GO = 1;
  1047                           
  1048                           ;incstack = 0
  1049                           ; Regs used in _initADCConversion: []
  1050  0003  1283               	bcf	3,5	;RP0=0, select bank0
  1051  0004  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0005  151F               	bsf	31,2	;volatile
  1053  0006  0008               	return
  1054  0007                     __end_of_initADCConversion:	
  1055                           
  1056                           	psect	text3
  1057  0E34                     __ptext3:	
  1058 ;; *************** function _initADC *****************
  1059 ;; Defined at:
  1060 ;;		line 8 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\ADC.h"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;		None               void
  1067 ;; Registers used:
  1068 ;;		wreg, status,2
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1074 ;;      Params:         0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0
  1076 ;;      Temps:          1       0       0       0       0
  1077 ;;      Totals:         1       0       0       0       0
  1078 ;;Total ram usage:        1 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           
  1088                           ;psect for function _initADC
  1089  0E34                     _initADC:	
  1090                           
  1091                           ;ADC.h: 72: ANSEL = 0x08;
  1092                           
  1093                           ;incstack = 0
  1094                           ; Regs used in _initADC: [wreg+status,2]
  1095  0E34  3008               	movlw	8
  1096  0E35  1683               	bsf	3,5	;RP0=1, select bank1
  1097  0E36  1303               	bcf	3,6	;RP1=0, select bank1
  1098  0E37  009B               	movwf	27	;volatile
  1099                           
  1100                           ;ADC.h: 75: ADCON1 = 0x00;
  1101  0E38  019F               	clrf	31	;volatile
  1102                           
  1103                           ;ADC.h: 78: ADCON1bits.ADFM = 1;
  1104  0E39  179F               	bsf	31,7	;volatile
  1105                           
  1106                           ;ADC.h: 81: ADCON0bits.CHS0 = 1;
  1107  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0E3C  159F               	bsf	31,3	;volatile
  1110                           
  1111                           ;ADC.h: 82: ADCON0bits.CHS1 = 1;
  1112  0E3D  161F               	bsf	31,4	;volatile
  1113                           
  1114                           ;ADC.h: 83: ADCON0bits.CHS2 = 0;
  1115  0E3E  129F               	bcf	31,5	;volatile
  1116                           
  1117                           ;ADC.h: 86: ADCON0bits.ADCS0 = 0;
  1118  0E3F  131F               	bcf	31,6	;volatile
  1119                           
  1120                           ;ADC.h: 87: ADCON0bits.ADCS1 = 0;
  1121  0E40  139F               	bcf	31,7	;volatile
  1122                           
  1123                           ;ADC.h: 90: ADCON0bits.ADON = 1;
  1124  0E41  141F               	bsf	31,0	;volatile
  1125                           
  1126                           ;ADC.h: 93: _delay((unsigned long)((20)*(4000000/4000000.0)));
  1127  0E42  3006               	movlw	6
  1128  0E43  00F0               	movwf	??_initADC
  1129  0E44                     u2577:	
  1130  0E44  0BF0               	decfsz	??_initADC,f
  1131  0E45  2E44               	goto	u2577
  1132  0E46  0000               	nop
  1133  0E47  0008               	return
  1134  0E48                     __end_of_initADC:	
  1135                           
  1136                           	psect	text4
  1137  0E95                     __ptext4:	
  1138 ;; *************** function _getADC10bitResult *****************
  1139 ;; Defined at:
  1140 ;;		line 107 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\ADC.h"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  result          2    5[COMMON] int 
  1145 ;;  adresh          1    4[COMMON] unsigned char 
  1146 ;;  adresl          1    3[COMMON] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  2    0[COMMON] int 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, status,0
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1156 ;;      Params:         2       0       0       0       0
  1157 ;;      Locals:         4       0       0       0       0
  1158 ;;      Temps:          1       0       0       0       0
  1159 ;;      Totals:         7       0       0       0       0
  1160 ;;Total ram usage:        7 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function _getADC10bitResult
  1171  0E95                     _getADC10bitResult:	
  1172                           
  1173                           ;ADC.h: 108: unsigned char adresl = ADRESL;
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _getADC10bitResult: [wreg+status,2+status,0]
  1177  0E95  1683               	bsf	3,5	;RP0=1, select bank1
  1178  0E96  1303               	bcf	3,6	;RP1=0, select bank1
  1179  0E97  081E               	movf	30,w	;volatile
  1180  0E98  00F2               	movwf	??_getADC10bitResult
  1181  0E99  0872               	movf	??_getADC10bitResult,w
  1182  0E9A  00F3               	movwf	getADC10bitResult@adresl
  1183                           
  1184                           ;ADC.h: 109: unsigned char adresh = ADRESH;
  1185  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0E9D  081E               	movf	30,w	;volatile
  1188  0E9E  00F2               	movwf	??_getADC10bitResult
  1189  0E9F  0872               	movf	??_getADC10bitResult,w
  1190  0EA0  00F4               	movwf	getADC10bitResult@adresh
  1191                           
  1192                           ;ADC.h: 111: int result = (ADRESH * 256L) + ADRESL;
  1193  0EA1  081E               	movf	30,w	;volatile
  1194  0EA2  01F6               	clrf	getADC10bitResult@result+1
  1195  0EA3  07F6               	addwf	getADC10bitResult@result+1,f
  1196  0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  1197  0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  1198  0EA6  081E               	movf	30,w	;volatile
  1199  0EA7  01F5               	clrf	getADC10bitResult@result
  1200  0EA8  07F5               	addwf	getADC10bitResult@result,f
  1201                           
  1202                           ;ADC.h: 112: return result;
  1203  0EA9  0876               	movf	getADC10bitResult@result+1,w
  1204  0EAA  01F1               	clrf	?_getADC10bitResult+1
  1205  0EAB  07F1               	addwf	?_getADC10bitResult+1,f
  1206  0EAC  0875               	movf	getADC10bitResult@result,w
  1207  0EAD  01F0               	clrf	?_getADC10bitResult
  1208  0EAE  07F0               	addwf	?_getADC10bitResult,f
  1209  0EAF  0008               	return
  1210  0EB0                     __end_of_getADC10bitResult:	
  1211                           
  1212                           	psect	text5
  1213  01FE                     __ptext5:	
  1214 ;; *************** function _ftoa *****************
  1215 ;; Defined at:
  1216 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftoa.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  f               3   36[BANK0 ] float 
  1219 ;;  status          1   39[BANK0 ] PTR int 
  1220 ;;		 -> NULL(0), 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  l               4   45[BANK0 ] unsigned long 
  1223 ;;  rem             4   41[BANK0 ] unsigned long 
  1224 ;;  cp              1   49[BANK0 ] PTR unsigned char 
  1225 ;;		 -> ftoa@buf(17), 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      PTR unsigned char 
  1228 ;; Registers used:
  1229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1235 ;;      Params:         0       4       0       0       0
  1236 ;;      Locals:         0       9       0       0       0
  1237 ;;      Temps:          0       1       0       0       0
  1238 ;;      Totals:         0      14       0       0       0
  1239 ;;Total ram usage:       14 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    3
  1242 ;; This function calls:
  1243 ;;		___ftge
  1244 ;;		___ftmul
  1245 ;;		___ftneg
  1246 ;;		___ftsub
  1247 ;;		___fttol
  1248 ;;		___lltoft
  1249 ;;		_sprintf
  1250 ;; This function is called by:
  1251 ;;		_main
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _ftoa
  1257  01FE                     _ftoa:	
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1261  01FE  30A0               	movlw	ftoa@buf& (0+255)
  1262  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0201  00C8               	movwf	??_ftoa
  1265  0202  0848               	movf	??_ftoa,w
  1266  0203  00D1               	movwf	ftoa@cp
  1267  0204  0844               	movf	ftoa@f,w
  1268  0205  00F0               	movwf	___ftge@ff1
  1269  0206  0845               	movf	ftoa@f+1,w
  1270  0207  00F1               	movwf	___ftge@ff1+1
  1271  0208  0846               	movf	ftoa@f+2,w
  1272  0209  00F2               	movwf	___ftge@ff1+2
  1273  020A  3000               	movlw	0
  1274  020B  00F3               	movwf	___ftge@ff2
  1275  020C  3000               	movlw	0
  1276  020D  00F4               	movwf	___ftge@ff2+1
  1277  020E  3000               	movlw	0
  1278  020F  00F5               	movwf	___ftge@ff2+2
  1279  0210  118A  204D  118A   	fcall	___ftge
  1280  0213  1803               	btfsc	3,0
  1281  0214  2A33               	goto	l1833
  1282  0215  302D               	movlw	45
  1283  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1284  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1285  0218  00C8               	movwf	??_ftoa
  1286  0219  0851               	movf	ftoa@cp,w
  1287  021A  0084               	movwf	4
  1288  021B  0848               	movf	??_ftoa,w
  1289  021C  1383               	bcf	3,7	;select IRP bank0
  1290  021D  0080               	movwf	0
  1291  021E  3001               	movlw	1
  1292  021F  00C8               	movwf	??_ftoa
  1293  0220  0848               	movf	??_ftoa,w
  1294  0221  07D1               	addwf	ftoa@cp,f
  1295  0222  0844               	movf	ftoa@f,w
  1296  0223  00F0               	movwf	___ftneg@f1
  1297  0224  0845               	movf	ftoa@f+1,w
  1298  0225  00F1               	movwf	___ftneg@f1+1
  1299  0226  0846               	movf	ftoa@f+2,w
  1300  0227  00F2               	movwf	___ftneg@f1+2
  1301  0228  158A  260A  118A   	fcall	___ftneg
  1302  022B  0870               	movf	?___ftneg,w
  1303  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1304  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1305  022E  00C4               	movwf	ftoa@f
  1306  022F  0871               	movf	?___ftneg+1,w
  1307  0230  00C5               	movwf	ftoa@f+1
  1308  0231  0872               	movf	?___ftneg+2,w
  1309  0232  00C6               	movwf	ftoa@f+2
  1310  0233                     l1833:	
  1311  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0235  0844               	movf	ftoa@f,w
  1314  0236  00B0               	movwf	___fttol@f1
  1315  0237  0845               	movf	ftoa@f+1,w
  1316  0238  00B1               	movwf	___fttol@f1+1
  1317  0239  0846               	movf	ftoa@f+2,w
  1318  023A  00B2               	movwf	___fttol@f1+2
  1319  023B  118A  2170  118A   	fcall	___fttol
  1320  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1321  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1322  0240  0833               	movf	?___fttol+3,w
  1323  0241  00D0               	movwf	ftoa@l+3
  1324  0242  0832               	movf	?___fttol+2,w
  1325  0243  00CF               	movwf	ftoa@l+2
  1326  0244  0831               	movf	?___fttol+1,w
  1327  0245  00CE               	movwf	ftoa@l+1
  1328  0246  0830               	movf	?___fttol,w
  1329  0247  00CD               	movwf	ftoa@l
  1330  0248  0850               	movf	ftoa@l+3,w
  1331  0249  00FB               	movwf	___lltoft@c+3
  1332  024A  084F               	movf	ftoa@l+2,w
  1333  024B  00FA               	movwf	___lltoft@c+2
  1334  024C  084E               	movf	ftoa@l+1,w
  1335  024D  00F9               	movwf	___lltoft@c+1
  1336  024E  084D               	movf	ftoa@l,w
  1337  024F  00F8               	movwf	___lltoft@c
  1338  0250  158A  2710  118A   	fcall	___lltoft
  1339  0253  0878               	movf	?___lltoft,w
  1340  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0256  00A7               	movwf	___ftsub@f2
  1343  0257  0879               	movf	?___lltoft+1,w
  1344  0258  00A8               	movwf	___ftsub@f2+1
  1345  0259  087A               	movf	?___lltoft+2,w
  1346  025A  00A9               	movwf	___ftsub@f2+2
  1347  025B  0844               	movf	ftoa@f,w
  1348  025C  00AA               	movwf	___ftsub@f1
  1349  025D  0845               	movf	ftoa@f+1,w
  1350  025E  00AB               	movwf	___ftsub@f1+1
  1351  025F  0846               	movf	ftoa@f+2,w
  1352  0260  00AC               	movwf	___ftsub@f1+2
  1353  0261  158A  267A  118A   	fcall	___ftsub
  1354  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1355  0265  1303               	bcf	3,6	;RP1=0, select bank0
  1356  0266  0827               	movf	?___ftsub,w
  1357  0267  00C4               	movwf	ftoa@f
  1358  0268  0828               	movf	?___ftsub+1,w
  1359  0269  00C5               	movwf	ftoa@f+1
  1360  026A  0829               	movf	?___ftsub+2,w
  1361  026B  00C6               	movwf	ftoa@f+2
  1362  026C  0844               	movf	ftoa@f,w
  1363  026D  00A3               	movwf	___ftmul@f2
  1364  026E  0845               	movf	ftoa@f+1,w
  1365  026F  00A4               	movwf	___ftmul@f2+1
  1366  0270  0846               	movf	ftoa@f+2,w
  1367  0271  00A5               	movwf	___ftmul@f2+2
  1368  0272  3024               	movlw	36
  1369  0273  00A0               	movwf	___ftmul@f1
  1370  0274  3074               	movlw	116
  1371  0275  00A1               	movwf	___ftmul@f1+1
  1372  0276  3049               	movlw	73
  1373  0277  00A2               	movwf	___ftmul@f1+2
  1374  0278  118A  2411  118A   	fcall	___ftmul
  1375  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1376  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1377  027D  0820               	movf	?___ftmul,w
  1378  027E  00B0               	movwf	___fttol@f1
  1379  027F  0821               	movf	?___ftmul+1,w
  1380  0280  00B1               	movwf	___fttol@f1+1
  1381  0281  0822               	movf	?___ftmul+2,w
  1382  0282  00B2               	movwf	___fttol@f1+2
  1383  0283  118A  2170  118A   	fcall	___fttol
  1384  0286  1283               	bcf	3,5	;RP0=0, select bank0
  1385  0287  1303               	bcf	3,6	;RP1=0, select bank0
  1386  0288  0833               	movf	?___fttol+3,w
  1387  0289  00CC               	movwf	ftoa@rem+3
  1388  028A  0832               	movf	?___fttol+2,w
  1389  028B  00CB               	movwf	ftoa@rem+2
  1390  028C  0831               	movf	?___fttol+1,w
  1391  028D  00CA               	movwf	ftoa@rem+1
  1392  028E  0830               	movf	?___fttol,w
  1393  028F  00C9               	movwf	ftoa@rem
  1394  0290  3029               	movlw	(STR_1-__stringbase)& (0+255)
  1395  0291  00C8               	movwf	??_ftoa
  1396  0292  0848               	movf	??_ftoa,w
  1397  0293  00AA               	movwf	sprintf@f
  1398  0294  0850               	movf	ftoa@l+3,w
  1399  0295  00AE               	movwf	?_sprintf+4
  1400  0296  084F               	movf	ftoa@l+2,w
  1401  0297  00AD               	movwf	?_sprintf+3
  1402  0298  084E               	movf	ftoa@l+1,w
  1403  0299  00AC               	movwf	?_sprintf+2
  1404  029A  084D               	movf	ftoa@l,w
  1405  029B  00AB               	movwf	?_sprintf+1
  1406  029C  084C               	movf	ftoa@rem+3,w
  1407  029D  00B2               	movwf	?_sprintf+8
  1408  029E  084B               	movf	ftoa@rem+2,w
  1409  029F  00B1               	movwf	?_sprintf+7
  1410  02A0  084A               	movf	ftoa@rem+1,w
  1411  02A1  00B0               	movwf	?_sprintf+6
  1412  02A2  0849               	movf	ftoa@rem,w
  1413  02A3  00AF               	movwf	?_sprintf+5
  1414  02A4  0851               	movf	ftoa@cp,w
  1415  02A5  118A  25E9         	fcall	_sprintf
  1416  02A7  30A0               	movlw	ftoa@buf& (0+255)
  1417  02A8  0008               	return
  1418  02A9                     __end_of_ftoa:	
  1419                           
  1420                           	psect	text6
  1421  05E9                     __ptext6:	
  1422 ;; *************** function _sprintf *****************
  1423 ;; Defined at:
  1424 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  sp              1    wreg     PTR unsigned char 
  1427 ;;		 -> ftoa@buf(17), 
  1428 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  1429 ;;		 -> STR_1(11), 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  1432 ;;		 -> ftoa@buf(17), 
  1433 ;;  _val            4   26[BANK0 ] struct .
  1434 ;;  prec            2   33[BANK0 ] int 
  1435 ;;  width           2   31[BANK0 ] int 
  1436 ;;  c               1   35[BANK0 ] char 
  1437 ;;  ap              1   25[BANK0 ] PTR void [1]
  1438 ;;		 -> ?_sprintf(2), 
  1439 ;;  flag            1   24[BANK0 ] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2   10[BANK0 ] int 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1449 ;;      Params:         0       9       0       0       0
  1450 ;;      Locals:         0      12       0       0       0
  1451 ;;      Temps:          0       5       0       0       0
  1452 ;;      Totals:         0      26       0       0       0
  1453 ;;Total ram usage:       26 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    1
  1456 ;; This function calls:
  1457 ;;		___lldiv
  1458 ;;		___llmod
  1459 ;;		___wmul
  1460 ;;		_isdigit
  1461 ;; This function is called by:
  1462 ;;		_ftoa
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           
  1467                           ;psect for function _sprintf
  1468  05E9                     _sprintf:	
  1469                           
  1470                           ;incstack = 0
  1471                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1472                           ;sprintf@sp stored from wreg
  1473  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1474  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1475  05EB  00BE               	movwf	sprintf@sp
  1476                           
  1477                           ;doprnt.c: 494: va_list ap;
  1478                           ;doprnt.c: 499: signed char c;
  1479                           ;doprnt.c: 501: int width;
  1480                           ;doprnt.c: 504: int prec;
  1481                           ;doprnt.c: 508: unsigned char flag;
  1482                           ;doprnt.c: 527: union {
  1483                           ;doprnt.c: 528: unsigned long _val;
  1484                           ;doprnt.c: 529: struct {
  1485                           ;doprnt.c: 530: const char * _cp;
  1486                           ;doprnt.c: 531: unsigned _len;
  1487                           ;doprnt.c: 532: } _str;
  1488                           ;doprnt.c: 533: } _val;
  1489                           ;doprnt.c: 542: *ap = __va_start();
  1490  05EC  302B               	movlw	(?_sprintf+1)& (0+255)
  1491  05ED  00B3               	movwf	??_sprintf
  1492  05EE  0833               	movf	??_sprintf,w
  1493  05EF  00B9               	movwf	sprintf@ap
  1494  05F0                     l1599:	
  1495                           ;doprnt.c: 545: while(c = *f++) {
  1496                           
  1497  05F0  3001               	movlw	1
  1498  05F1  07AA               	addwf	sprintf@f,f
  1499  05F2  30FF               	movlw	-1
  1500  05F3  072A               	addwf	sprintf@f,w
  1501  05F4  0084               	movwf	4
  1502  05F5  158A  2000  118A   	fcall	stringdir
  1503  05F8  00B3               	movwf	??_sprintf
  1504  05F9  0833               	movf	??_sprintf,w
  1505  05FA  00C3               	movwf	sprintf@c
  1506  05FB  08C3               	movf	sprintf@c,f
  1507  05FC  1903               	btfsc	3,2
  1508  05FD  2FF2               	goto	l1601
  1509                           
  1510                           ;doprnt.c: 547: if(c != '%')
  1511  05FE  0843               	movf	sprintf@c,w
  1512  05FF  3A25               	xorlw	37
  1513  0600  1903               	skipnz
  1514  0601  2E0E               	goto	l1509
  1515                           
  1516                           ;doprnt.c: 549: {
  1517                           ;doprnt.c: 550: ((*sp++ = (c)));
  1518  0602  0843               	movf	sprintf@c,w
  1519  0603  00B3               	movwf	??_sprintf
  1520  0604  083E               	movf	sprintf@sp,w
  1521  0605  0084               	movwf	4
  1522  0606  0833               	movf	??_sprintf,w
  1523  0607  1383               	bcf	3,7	;select IRP bank0
  1524  0608  0080               	movwf	0
  1525  0609  3001               	movlw	1
  1526  060A  00B3               	movwf	??_sprintf
  1527  060B  0833               	movf	??_sprintf,w
  1528  060C  07BE               	addwf	sprintf@sp,f
  1529                           
  1530                           ;doprnt.c: 551: continue;
  1531  060D  2DF0               	goto	l1599
  1532  060E                     l1509:	
  1533                           
  1534                           ;doprnt.c: 552: }
  1535                           ;doprnt.c: 555: width = 0;
  1536  060E  01BF               	clrf	sprintf@width
  1537  060F  01C0               	clrf	sprintf@width+1
  1538                           
  1539                           ;doprnt.c: 557: flag = 0;
  1540  0610  01B8               	clrf	sprintf@flag
  1541                           
  1542                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1543  0611  082A               	movf	sprintf@f,w
  1544  0612  0084               	movwf	4
  1545  0613  158A  2000  118A   	fcall	stringdir
  1546  0616  158A  2626  118A   	fcall	_isdigit
  1547  0619  1C03               	btfss	3,0
  1548  061A  2E55               	goto	l1523
  1549                           
  1550                           ;doprnt.c: 607: width = 0;
  1551  061B  1283               	bcf	3,5	;RP0=0, select bank0
  1552  061C  1303               	bcf	3,6	;RP1=0, select bank0
  1553  061D  01BF               	clrf	sprintf@width
  1554  061E  01C0               	clrf	sprintf@width+1
  1555  061F                     l1515:	
  1556                           ;doprnt.c: 608: do {
  1557                           
  1558                           
  1559                           ;doprnt.c: 609: width *= 10;
  1560  061F  300A               	movlw	10
  1561  0620  00F0               	movwf	___wmul@multiplier
  1562  0621  3000               	movlw	0
  1563  0622  00F1               	movwf	___wmul@multiplier+1
  1564  0623  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0624  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0625  0840               	movf	sprintf@width+1,w
  1567  0626  01F3               	clrf	___wmul@multiplicand+1
  1568  0627  07F3               	addwf	___wmul@multiplicand+1,f
  1569  0628  083F               	movf	sprintf@width,w
  1570  0629  01F2               	clrf	___wmul@multiplicand
  1571  062A  07F2               	addwf	___wmul@multiplicand,f
  1572  062B  158A  26ED  118A   	fcall	___wmul
  1573  062E  0871               	movf	?___wmul+1,w
  1574  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1575  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1576  0631  01C0               	clrf	sprintf@width+1
  1577  0632  07C0               	addwf	sprintf@width+1,f
  1578  0633  0870               	movf	?___wmul,w
  1579  0634  01BF               	clrf	sprintf@width
  1580  0635  07BF               	addwf	sprintf@width,f
  1581                           
  1582                           ;doprnt.c: 610: width += *f++ - '0';
  1583  0636  082A               	movf	sprintf@f,w
  1584  0637  0084               	movwf	4
  1585  0638  158A  2000  118A   	fcall	stringdir
  1586  063B  3ED0               	addlw	208
  1587  063C  00B3               	movwf	??_sprintf
  1588  063D  30FF               	movlw	255
  1589  063E  1803               	skipnc
  1590  063F  3000               	movlw	0
  1591  0640  00B4               	movwf	??_sprintf+1
  1592  0641  0833               	movf	??_sprintf,w
  1593  0642  07BF               	addwf	sprintf@width,f
  1594  0643  1803               	skipnc
  1595  0644  0AC0               	incf	sprintf@width+1,f
  1596  0645  0834               	movf	??_sprintf+1,w
  1597  0646  07C0               	addwf	sprintf@width+1,f
  1598  0647  3001               	movlw	1
  1599  0648  00B3               	movwf	??_sprintf
  1600  0649  0833               	movf	??_sprintf,w
  1601  064A  07AA               	addwf	sprintf@f,f
  1602                           
  1603                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1604  064B  082A               	movf	sprintf@f,w
  1605  064C  0084               	movwf	4
  1606  064D  158A  2000  118A   	fcall	stringdir
  1607  0650  158A  2626  118A   	fcall	_isdigit
  1608  0653  1803               	btfsc	3,0
  1609  0654  2E1F               	goto	l1515
  1610  0655                     l1523:	
  1611                           
  1612                           ;doprnt.c: 617: }
  1613                           ;doprnt.c: 620: if(*f == '.') {
  1614  0655  1283               	bcf	3,5	;RP0=0, select bank0
  1615  0656  1303               	bcf	3,6	;RP1=0, select bank0
  1616  0657  082A               	movf	sprintf@f,w
  1617  0658  0084               	movwf	4
  1618  0659  158A  2000  118A   	fcall	stringdir
  1619  065C  3A2E               	xorlw	46
  1620  065D  1D03               	skipz
  1621  065E  2E99               	goto	l1535
  1622                           
  1623                           ;doprnt.c: 622: f++;
  1624  065F  3001               	movlw	1
  1625  0660  00B3               	movwf	??_sprintf
  1626  0661  0833               	movf	??_sprintf,w
  1627  0662  07AA               	addwf	sprintf@f,f
  1628                           
  1629                           ;doprnt.c: 629: {
  1630                           ;doprnt.c: 630: prec = 0;
  1631  0663  01C1               	clrf	sprintf@prec
  1632  0664  01C2               	clrf	sprintf@prec+1
  1633  0665                     l1533:	
  1634                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1635                           
  1636  0665  082A               	movf	sprintf@f,w
  1637  0666  0084               	movwf	4
  1638  0667  158A  2000  118A   	fcall	stringdir
  1639  066A  158A  2626  118A   	fcall	_isdigit
  1640  066D  1C03               	btfss	3,0
  1641  066E  2EA5               	goto	l1541
  1642                           
  1643                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1644  066F  1283               	bcf	3,5	;RP0=0, select bank0
  1645  0670  1303               	bcf	3,6	;RP1=0, select bank0
  1646  0671  0842               	movf	sprintf@prec+1,w
  1647  0672  01F1               	clrf	___wmul@multiplier+1
  1648  0673  07F1               	addwf	___wmul@multiplier+1,f
  1649  0674  0841               	movf	sprintf@prec,w
  1650  0675  01F0               	clrf	___wmul@multiplier
  1651  0676  07F0               	addwf	___wmul@multiplier,f
  1652  0677  300A               	movlw	10
  1653  0678  00F2               	movwf	___wmul@multiplicand
  1654  0679  3000               	movlw	0
  1655  067A  00F3               	movwf	___wmul@multiplicand+1
  1656  067B  158A  26ED  118A   	fcall	___wmul
  1657  067E  1283               	bcf	3,5	;RP0=0, select bank0
  1658  067F  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0680  082A               	movf	sprintf@f,w
  1660  0681  0084               	movwf	4
  1661  0682  158A  2000  118A   	fcall	stringdir
  1662  0685  0770               	addwf	?___wmul,w
  1663  0686  00B3               	movwf	??_sprintf
  1664  0687  3000               	movlw	0
  1665  0688  1803               	skipnc
  1666  0689  3001               	movlw	1
  1667  068A  0771               	addwf	?___wmul+1,w
  1668  068B  00B4               	movwf	??_sprintf+1
  1669  068C  0833               	movf	??_sprintf,w
  1670  068D  3ED0               	addlw	208
  1671  068E  00C1               	movwf	sprintf@prec
  1672  068F  0834               	movf	??_sprintf+1,w
  1673  0690  1803               	skipnc
  1674  0691  3E01               	addlw	1
  1675  0692  3EFF               	addlw	255
  1676  0693  00C2               	movwf	sprintf@prec+1
  1677  0694  3001               	movlw	1
  1678  0695  00B3               	movwf	??_sprintf
  1679  0696  0833               	movf	??_sprintf,w
  1680  0697  07AA               	addwf	sprintf@f,f
  1681  0698  2E65               	goto	l1533
  1682  0699                     l1535:	
  1683                           ;doprnt.c: 633: }
  1684                           ;doprnt.c: 634: } else {
  1685                           
  1686                           
  1687                           ;doprnt.c: 635: prec = 0;
  1688  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1689  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1690  069B  01C1               	clrf	sprintf@prec
  1691  069C  01C2               	clrf	sprintf@prec+1
  1692                           
  1693                           ;doprnt.c: 644: switch(c = *f++) {
  1694                           
  1695                           ;doprnt.c: 639: }
  1696                           ;doprnt.c: 642: loop:
  1697  069D  2EA5               	goto	l1541
  1698  069E                     l117:	
  1699                           ;doprnt.c: 650: case 'l':
  1700                           
  1701                           ;doprnt.c: 647: goto alldone;
  1702                           
  1703                           ;doprnt.c: 646: case 0:
  1704                           
  1705                           
  1706                           ;doprnt.c: 652: flag |= 0x10;
  1707  069E  1638               	bsf	sprintf@flag,4
  1708                           
  1709                           ;doprnt.c: 653: goto loop;
  1710  069F  2EA5               	goto	l1541
  1711  06A0                     l1537:	
  1712                           ;doprnt.c: 826: case 'u':
  1713                           
  1714                           ;doprnt.c: 822: continue;
  1715                           
  1716                           ;doprnt.c: 811: default:
  1717                           
  1718                           
  1719                           ;doprnt.c: 827: flag |= 0xC0;
  1720  06A0  30C0               	movlw	192
  1721  06A1  00B3               	movwf	??_sprintf
  1722  06A2  0833               	movf	??_sprintf,w
  1723  06A3  04B8               	iorwf	sprintf@flag,f
  1724                           
  1725                           ;doprnt.c: 831: }
  1726                           
  1727                           ;doprnt.c: 828: break;
  1728  06A4  2EBA               	goto	l120
  1729  06A5                     l1541:	
  1730  06A5  3001               	movlw	1
  1731  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1732  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1733  06A8  07AA               	addwf	sprintf@f,f
  1734  06A9  30FF               	movlw	-1
  1735  06AA  072A               	addwf	sprintf@f,w
  1736  06AB  0084               	movwf	4
  1737  06AC  158A  2000  118A   	fcall	stringdir
  1738  06AF  00C3               	movwf	sprintf@c
  1739                           
  1740                           ; Switch size 1, requested type "space"
  1741                           ; Number of cases is 3, Range of values is 0 to 117
  1742                           ; switch strategies available:
  1743                           ; Name         Instructions Cycles
  1744                           ; simple_byte           10     6 (average)
  1745                           ; direct_byte          243     7 (fixed)
  1746                           ; jumptable            260     6 (fixed)
  1747                           ;	Chosen strategy is simple_byte
  1748  06B0  3A00               	xorlw	0	; case 0
  1749  06B1  1903               	skipnz
  1750  06B2  2FF2               	goto	l1601
  1751  06B3  3A6C               	xorlw	108	; case 108
  1752  06B4  1903               	skipnz
  1753  06B5  2E9E               	goto	l117
  1754  06B6  3A19               	xorlw	25	; case 117
  1755  06B7  1903               	skipnz
  1756  06B8  2EA0               	goto	l1537
  1757  06B9  2DF0               	goto	l1599
  1758  06BA                     l120:	
  1759                           
  1760                           ;doprnt.c: 1282: {
  1761                           ;doprnt.c: 1290: if(flag & 0x10)
  1762  06BA  1E38               	btfss	sprintf@flag,4
  1763  06BB  2ECC               	goto	l1547
  1764                           
  1765                           ;doprnt.c: 1291: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  1766  06BC  0839               	movf	sprintf@ap,w
  1767  06BD  0084               	movwf	4
  1768  06BE  1383               	bcf	3,7	;select IRP bank0
  1769  06BF  0800               	movf	0,w
  1770  06C0  00BA               	movwf	sprintf@_val
  1771  06C1  0A84               	incf	4,f
  1772  06C2  0800               	movf	0,w
  1773  06C3  00BB               	movwf	sprintf@_val+1
  1774  06C4  0A84               	incf	4,f
  1775  06C5  0800               	movf	0,w
  1776  06C6  00BC               	movwf	sprintf@_val+2
  1777  06C7  0A84               	incf	4,f
  1778  06C8  0800               	movf	0,w
  1779  06C9  00BD               	movwf	sprintf@_val+3
  1780  06CA  3004               	movlw	4
  1781  06CB  2EDB               	goto	L1
  1782  06CC                     l1547:	
  1783                           
  1784                           ;doprnt.c: 1292: else
  1785                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1786  06CC  0839               	movf	sprintf@ap,w
  1787  06CD  0084               	movwf	4
  1788  06CE  1383               	bcf	3,7	;select IRP bank0
  1789  06CF  0800               	movf	0,w
  1790  06D0  00B3               	movwf	??_sprintf
  1791  06D1  0A84               	incf	4,f
  1792  06D2  0800               	movf	0,w
  1793  06D3  00B4               	movwf	??_sprintf+1
  1794  06D4  0833               	movf	??_sprintf,w
  1795  06D5  00BA               	movwf	sprintf@_val
  1796  06D6  0834               	movf	??_sprintf+1,w
  1797  06D7  00BB               	movwf	sprintf@_val+1
  1798  06D8  01BC               	clrf	sprintf@_val+2
  1799  06D9  01BD               	clrf	sprintf@_val+3
  1800  06DA  3002               	movlw	2
  1801  06DB                     L1:	
  1802  06DB  00B3               	movwf	??_sprintf
  1803  06DC  0833               	movf	??_sprintf,w
  1804  06DD  07B9               	addwf	sprintf@ap,f
  1805                           
  1806                           ;doprnt.c: 1296: }
  1807                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  1808  06DE  0842               	movf	sprintf@prec+1,w
  1809  06DF  0441               	iorwf	sprintf@prec,w
  1810  06E0  1D03               	skipz
  1811  06E1  2EEE               	goto	l1557
  1812  06E2  083D               	movf	sprintf@_val+3,w
  1813  06E3  043C               	iorwf	sprintf@_val+2,w
  1814  06E4  043B               	iorwf	sprintf@_val+1,w
  1815  06E5  043A               	iorwf	sprintf@_val,w
  1816  06E6  1D03               	skipz
  1817  06E7  2EEE               	goto	l1557
  1818                           
  1819                           ;doprnt.c: 1300: prec++;
  1820  06E8  3001               	movlw	1
  1821  06E9  07C1               	addwf	sprintf@prec,f
  1822  06EA  1803               	skipnc
  1823  06EB  0AC2               	incf	sprintf@prec+1,f
  1824  06EC  3000               	movlw	0
  1825  06ED  07C2               	addwf	sprintf@prec+1,f
  1826  06EE                     l1557:	
  1827                           
  1828                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1829  06EE  01C3               	clrf	sprintf@c
  1830  06EF  0AC3               	incf	sprintf@c,f
  1831  06F0  0843               	movf	sprintf@c,w
  1832  06F1  3A0A               	xorlw	10
  1833  06F2  1903               	btfsc	3,2
  1834  06F3  2F28               	goto	l1569
  1835  06F4                     l1561:	
  1836                           
  1837                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1838  06F4  0843               	movf	sprintf@c,w
  1839  06F5  00B3               	movwf	??_sprintf
  1840  06F6  3001               	movlw	1
  1841  06F7                     u1975:	
  1842  06F7  1003               	clrc
  1843  06F8  0DB3               	rlf	??_sprintf,f
  1844  06F9  3EFF               	addlw	-1
  1845  06FA  1D03               	skipz
  1846  06FB  2EF7               	goto	u1975
  1847  06FC  1003               	clrc
  1848  06FD  0D33               	rlf	??_sprintf,w
  1849  06FE  3E01               	addlw	low (_dpowers-__stringbase)
  1850  06FF  0084               	movwf	4
  1851  0700  158A  2000  118A   	fcall	stringdir
  1852  0703  00B4               	movwf	??_sprintf+1
  1853  0704  158A  2000  118A   	fcall	stringdir
  1854  0707  00B5               	movwf	??_sprintf+2
  1855  0708  158A  2000  118A   	fcall	stringdir
  1856  070B  00B6               	movwf	??_sprintf+3
  1857  070C  158A  2000  118A   	fcall	stringdir
  1858  070F  00B7               	movwf	??_sprintf+4
  1859  0710  0837               	movf	??_sprintf+4,w
  1860  0711  023D               	subwf	sprintf@_val+3,w
  1861  0712  1D03               	skipz
  1862  0713  2F1E               	goto	u1985
  1863  0714  0836               	movf	??_sprintf+3,w
  1864  0715  023C               	subwf	sprintf@_val+2,w
  1865  0716  1D03               	skipz
  1866  0717  2F1E               	goto	u1985
  1867  0718  0835               	movf	??_sprintf+2,w
  1868  0719  023B               	subwf	sprintf@_val+1,w
  1869  071A  1D03               	skipz
  1870  071B  2F1E               	goto	u1985
  1871  071C  0834               	movf	??_sprintf+1,w
  1872  071D  023A               	subwf	sprintf@_val,w
  1873  071E                     u1985:	
  1874  071E  1C03               	btfss	3,0
  1875  071F  2F28               	goto	l1569
  1876                           
  1877                           ;doprnt.c: 1316: break;
  1878  0720  3001               	movlw	1
  1879  0721  00B3               	movwf	??_sprintf
  1880  0722  0833               	movf	??_sprintf,w
  1881  0723  07C3               	addwf	sprintf@c,f
  1882  0724  0843               	movf	sprintf@c,w
  1883  0725  3A0A               	xorlw	10
  1884  0726  1D03               	skipz
  1885  0727  2EF4               	goto	l1561
  1886  0728                     l1569:	
  1887                           
  1888                           ;doprnt.c: 1348: if(c < prec)
  1889  0728  0843               	movf	sprintf@c,w
  1890  0729  00B3               	movwf	??_sprintf
  1891  072A  01B4               	clrf	??_sprintf+1
  1892  072B  1BB3               	btfsc	??_sprintf,7
  1893  072C  03B4               	decf	??_sprintf+1,f
  1894  072D  0834               	movf	??_sprintf+1,w
  1895  072E  3A80               	xorlw	128
  1896  072F  00B5               	movwf	??_sprintf+2
  1897  0730  0842               	movf	sprintf@prec+1,w
  1898  0731  3A80               	xorlw	128
  1899  0732  0235               	subwf	??_sprintf+2,w
  1900  0733  1D03               	skipz
  1901  0734  2F37               	goto	u2005
  1902  0735  0841               	movf	sprintf@prec,w
  1903  0736  0233               	subwf	??_sprintf,w
  1904  0737                     u2005:	
  1905  0737  1803               	skipnc
  1906  0738  2F40               	goto	l1573
  1907                           
  1908                           ;doprnt.c: 1349: c = prec;
  1909  0739  1283               	bcf	3,5	;RP0=0, select bank0
  1910  073A  1303               	bcf	3,6	;RP1=0, select bank0
  1911  073B  0841               	movf	sprintf@prec,w
  1912  073C  00B3               	movwf	??_sprintf
  1913  073D  0833               	movf	??_sprintf,w
  1914  073E  00C3               	movwf	sprintf@c
  1915  073F  2F5A               	goto	l1577
  1916  0740                     l1573:	
  1917                           
  1918                           ;doprnt.c: 1350: else if(prec < c)
  1919  0740  1283               	bcf	3,5	;RP0=0, select bank0
  1920  0741  1303               	bcf	3,6	;RP1=0, select bank0
  1921  0742  0843               	movf	sprintf@c,w
  1922  0743  00B3               	movwf	??_sprintf
  1923  0744  01B4               	clrf	??_sprintf+1
  1924  0745  1BB3               	btfsc	??_sprintf,7
  1925  0746  03B4               	decf	??_sprintf+1,f
  1926  0747  0842               	movf	sprintf@prec+1,w
  1927  0748  3A80               	xorlw	128
  1928  0749  00B5               	movwf	??_sprintf+2
  1929  074A  0834               	movf	??_sprintf+1,w
  1930  074B  3A80               	xorlw	128
  1931  074C  0235               	subwf	??_sprintf+2,w
  1932  074D  1D03               	skipz
  1933  074E  2F51               	goto	u2015
  1934  074F  0833               	movf	??_sprintf,w
  1935  0750  0241               	subwf	sprintf@prec,w
  1936  0751                     u2015:	
  1937  0751  1803               	skipnc
  1938  0752  2F5A               	goto	l1577
  1939                           
  1940                           ;doprnt.c: 1351: prec = c;
  1941  0753  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0754  1303               	bcf	3,6	;RP1=0, select bank0
  1943  0755  0843               	movf	sprintf@c,w
  1944  0756  00C1               	movwf	sprintf@prec
  1945  0757  01C2               	clrf	sprintf@prec+1
  1946  0758  1BC1               	btfsc	sprintf@prec,7
  1947  0759  03C2               	decf	sprintf@prec+1,f
  1948  075A                     l1577:	
  1949                           
  1950                           ;doprnt.c: 1390: if(width > c)
  1951  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1952  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1953  075C  0843               	movf	sprintf@c,w
  1954  075D  00B3               	movwf	??_sprintf
  1955  075E  01B4               	clrf	??_sprintf+1
  1956  075F  1BB3               	btfsc	??_sprintf,7
  1957  0760  03B4               	decf	??_sprintf+1,f
  1958  0761  0834               	movf	??_sprintf+1,w
  1959  0762  3A80               	xorlw	128
  1960  0763  00B5               	movwf	??_sprintf+2
  1961  0764  0840               	movf	sprintf@width+1,w
  1962  0765  3A80               	xorlw	128
  1963  0766  0235               	subwf	??_sprintf+2,w
  1964  0767  1D03               	skipz
  1965  0768  2F6B               	goto	u2025
  1966  0769  083F               	movf	sprintf@width,w
  1967  076A  0233               	subwf	??_sprintf,w
  1968  076B                     u2025:	
  1969  076B  1803               	skipnc
  1970  076C  2F7B               	goto	l1581
  1971                           
  1972                           ;doprnt.c: 1391: width -= c;
  1973  076D  1283               	bcf	3,5	;RP0=0, select bank0
  1974  076E  1303               	bcf	3,6	;RP1=0, select bank0
  1975  076F  0843               	movf	sprintf@c,w
  1976  0770  00B3               	movwf	??_sprintf
  1977  0771  01B4               	clrf	??_sprintf+1
  1978  0772  1BB3               	btfsc	??_sprintf,7
  1979  0773  03B4               	decf	??_sprintf+1,f
  1980  0774  0833               	movf	??_sprintf,w
  1981  0775  02BF               	subwf	sprintf@width,f
  1982  0776  0834               	movf	??_sprintf+1,w
  1983  0777  1C03               	skipc
  1984  0778  03C0               	decf	sprintf@width+1,f
  1985  0779  02C0               	subwf	sprintf@width+1,f
  1986  077A  2F7F               	goto	l1583
  1987  077B                     l1581:	
  1988                           
  1989                           ;doprnt.c: 1392: else
  1990                           ;doprnt.c: 1393: width = 0;
  1991  077B  1283               	bcf	3,5	;RP0=0, select bank0
  1992  077C  1303               	bcf	3,6	;RP1=0, select bank0
  1993  077D  01BF               	clrf	sprintf@width
  1994  077E  01C0               	clrf	sprintf@width+1
  1995  077F                     l1583:	
  1996                           
  1997                           ;doprnt.c: 1431: {
  1998                           ;doprnt.c: 1433: if(width
  1999                           ;doprnt.c: 1437: )
  2000  077F  0840               	movf	sprintf@width+1,w
  2001  0780  043F               	iorwf	sprintf@width,w
  2002  0781  1903               	skipnz
  2003  0782  2FE3               	goto	l1597
  2004                           
  2005                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2006                           
  2007                           ;doprnt.c: 1438: do
  2008  0783  3020               	movlw	32
  2009  0784  00B3               	movwf	??_sprintf
  2010  0785  083E               	movf	sprintf@sp,w
  2011  0786  0084               	movwf	4
  2012  0787  0833               	movf	??_sprintf,w
  2013  0788  1383               	bcf	3,7	;select IRP bank0
  2014  0789  0080               	movwf	0
  2015  078A  3001               	movlw	1
  2016  078B  00B3               	movwf	??_sprintf
  2017  078C  0833               	movf	??_sprintf,w
  2018  078D  07BE               	addwf	sprintf@sp,f
  2019                           
  2020                           ;doprnt.c: 1440: while(--width);
  2021  078E  30FF               	movlw	255
  2022  078F  07BF               	addwf	sprintf@width,f
  2023  0790  1803               	skipnc
  2024  0791  0AC0               	incf	sprintf@width+1,f
  2025  0792  30FF               	movlw	255
  2026  0793  07C0               	addwf	sprintf@width+1,f
  2027  0794  2F7F               	goto	l1583
  2028  0795                     l1591:	
  2029                           ;doprnt.c: 1478: }
  2030                           ;doprnt.c: 1483: while(prec--) {
  2031                           
  2032                           
  2033                           ;doprnt.c: 1487: {
  2034                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2035  0795  3000               	movlw	0
  2036  0796  00A3               	movwf	___llmod@divisor+3
  2037  0797  3000               	movlw	0
  2038  0798  00A2               	movwf	___llmod@divisor+2
  2039  0799  3000               	movlw	0
  2040  079A  00A1               	movwf	___llmod@divisor+1
  2041  079B  300A               	movlw	10
  2042  079C  00A0               	movwf	___llmod@divisor
  2043  079D  0841               	movf	sprintf@prec,w
  2044  079E  00B3               	movwf	??_sprintf
  2045  079F  3001               	movlw	1
  2046  07A0                     u2055:	
  2047  07A0  1003               	clrc
  2048  07A1  0DB3               	rlf	??_sprintf,f
  2049  07A2  3EFF               	addlw	-1
  2050  07A3  1D03               	skipz
  2051  07A4  2FA0               	goto	u2055
  2052  07A5  1003               	clrc
  2053  07A6  0D33               	rlf	??_sprintf,w
  2054  07A7  3E01               	addlw	low (_dpowers-__stringbase)
  2055  07A8  0084               	movwf	4
  2056  07A9  158A  2000  118A   	fcall	stringdir
  2057  07AC  00F0               	movwf	___lldiv@divisor
  2058  07AD  158A  2000  118A   	fcall	stringdir
  2059  07B0  00F1               	movwf	___lldiv@divisor+1
  2060  07B1  158A  2000  118A   	fcall	stringdir
  2061  07B4  00F2               	movwf	___lldiv@divisor+2
  2062  07B5  158A  2000  118A   	fcall	stringdir
  2063  07B8  00F3               	movwf	___lldiv@divisor+3
  2064  07B9  083D               	movf	sprintf@_val+3,w
  2065  07BA  00F7               	movwf	___lldiv@dividend+3
  2066  07BB  083C               	movf	sprintf@_val+2,w
  2067  07BC  00F6               	movwf	___lldiv@dividend+2
  2068  07BD  083B               	movf	sprintf@_val+1,w
  2069  07BE  00F5               	movwf	___lldiv@dividend+1
  2070  07BF  083A               	movf	sprintf@_val,w
  2071  07C0  00F4               	movwf	___lldiv@dividend
  2072  07C1  118A  20AA  118A   	fcall	___lldiv
  2073  07C4  0873               	movf	?___lldiv+3,w
  2074  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  2075  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  2076  07C7  00A7               	movwf	___llmod@dividend+3
  2077  07C8  0872               	movf	?___lldiv+2,w
  2078  07C9  00A6               	movwf	___llmod@dividend+2
  2079  07CA  0871               	movf	?___lldiv+1,w
  2080  07CB  00A5               	movwf	___llmod@dividend+1
  2081  07CC  0870               	movf	?___lldiv,w
  2082  07CD  00A4               	movwf	___llmod@dividend
  2083  07CE  158A  27B2  118A   	fcall	___llmod
  2084  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  2085  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  2086  07D3  0820               	movf	?___llmod,w
  2087  07D4  3E30               	addlw	48
  2088  07D5  00B4               	movwf	??_sprintf+1
  2089  07D6  0834               	movf	??_sprintf+1,w
  2090  07D7  00C3               	movwf	sprintf@c
  2091                           
  2092                           ;doprnt.c: 1532: }
  2093                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2094  07D8  0843               	movf	sprintf@c,w
  2095  07D9  00B3               	movwf	??_sprintf
  2096  07DA  083E               	movf	sprintf@sp,w
  2097  07DB  0084               	movwf	4
  2098  07DC  0833               	movf	??_sprintf,w
  2099  07DD  1383               	bcf	3,7	;select IRP bank0
  2100  07DE  0080               	movwf	0
  2101  07DF  3001               	movlw	1
  2102  07E0  00B3               	movwf	??_sprintf
  2103  07E1  0833               	movf	??_sprintf,w
  2104  07E2  07BE               	addwf	sprintf@sp,f
  2105  07E3                     l1597:	
  2106  07E3  30FF               	movlw	255
  2107  07E4  07C1               	addwf	sprintf@prec,f
  2108  07E5  1803               	skipnc
  2109  07E6  0AC2               	incf	sprintf@prec+1,f
  2110  07E7  30FF               	movlw	255
  2111  07E8  07C2               	addwf	sprintf@prec+1,f
  2112  07E9  30FF               	movlw	255
  2113  07EA  0642               	xorwf	sprintf@prec+1,w
  2114  07EB  1D03               	skipz
  2115  07EC  2FEF               	goto	u2065
  2116  07ED  30FF               	movlw	255
  2117  07EE  0641               	xorwf	sprintf@prec,w
  2118  07EF                     u2065:	
  2119  07EF  1903               	btfsc	3,2
  2120  07F0  2DF0               	goto	l1599
  2121  07F1  2F95               	goto	l1591
  2122  07F2                     l1601:	
  2123                           ;doprnt.c: 1534: }
  2124                           ;doprnt.c: 1542: }
  2125                           ;doprnt.c: 1544: alldone:
  2126                           
  2127                           
  2128                           ;doprnt.c: 1547: *sp = 0;
  2129  07F2  083E               	movf	sprintf@sp,w
  2130  07F3  0084               	movwf	4
  2131  07F4  1383               	bcf	3,7	;select IRP bank0
  2132  07F5  0180               	clrf	0
  2133  07F6  0008               	return
  2134  07F7                     __end_of_sprintf:	
  2135                           ;doprnt.c: 1549: return 0;
  2136                           ;	Return value of _sprintf is never used
  2137                           
  2138                           
  2139                           	psect	text7
  2140  0E26                     __ptext7:	
  2141 ;; *************** function _isdigit *****************
  2142 ;; Defined at:
  2143 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;  c               1    wreg     unsigned char 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  c               1    1[COMMON] unsigned char 
  2148 ;; Return value:  Size  Location     Type
  2149 ;;		None               void
  2150 ;; Registers used:
  2151 ;;		wreg, status,2, status,0
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2157 ;;      Params:         0       0       0       0       0
  2158 ;;      Locals:         2       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0
  2160 ;;      Totals:         2       0       0       0       0
  2161 ;;Total ram usage:        2 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_sprintf
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _isdigit
  2172  0E26                     _isdigit:	
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2176                           ;isdigit@c stored from wreg
  2177  0E26  00F1               	movwf	isdigit@c
  2178  0E27  01F0               	clrf	_isdigit$519
  2179  0E28  303A               	movlw	58
  2180  0E29  0271               	subwf	isdigit@c,w
  2181  0E2A  1803               	skipnc
  2182  0E2B  2E32               	goto	l1339
  2183  0E2C  3030               	movlw	48
  2184  0E2D  0271               	subwf	isdigit@c,w
  2185  0E2E  1C03               	skipc
  2186  0E2F  2E32               	goto	l1339
  2187  0E30  01F0               	clrf	_isdigit$519
  2188  0E31  0AF0               	incf	_isdigit$519,f
  2189  0E32                     l1339:	
  2190  0E32  0C70               	rrf	_isdigit$519,w
  2191  0E33  0008               	return
  2192  0E34                     __end_of_isdigit:	
  2193                           
  2194                           	psect	text8
  2195  0EED                     __ptext8:	
  2196 ;; *************** function ___wmul *****************
  2197 ;; Defined at:
  2198 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  multiplier      2    0[COMMON] unsigned int 
  2201 ;;  multiplicand    2    2[COMMON] unsigned int 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  product         2    4[COMMON] unsigned int 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2    0[COMMON] unsigned int 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2213 ;;      Params:         4       0       0       0       0
  2214 ;;      Locals:         2       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0
  2216 ;;      Totals:         6       0       0       0       0
  2217 ;;Total ram usage:        6 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_sprintf
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function ___wmul
  2228  0EED                     ___wmul:	
  2229                           
  2230                           ;incstack = 0
  2231                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2232  0EED  01F4               	clrf	___wmul@product
  2233  0EEE  01F5               	clrf	___wmul@product+1
  2234  0EEF                     l1345:	
  2235  0EEF  1C70               	btfss	___wmul@multiplier,0
  2236  0EF0  2EF7               	goto	l223
  2237  0EF1  0872               	movf	___wmul@multiplicand,w
  2238  0EF2  07F4               	addwf	___wmul@product,f
  2239  0EF3  1803               	skipnc
  2240  0EF4  0AF5               	incf	___wmul@product+1,f
  2241  0EF5  0873               	movf	___wmul@multiplicand+1,w
  2242  0EF6  07F5               	addwf	___wmul@product+1,f
  2243  0EF7                     l223:	
  2244  0EF7  3001               	movlw	1
  2245  0EF8                     u1475:	
  2246  0EF8  1003               	clrc
  2247  0EF9  0DF2               	rlf	___wmul@multiplicand,f
  2248  0EFA  0DF3               	rlf	___wmul@multiplicand+1,f
  2249  0EFB  3EFF               	addlw	-1
  2250  0EFC  1D03               	skipz
  2251  0EFD  2EF8               	goto	u1475
  2252  0EFE  3001               	movlw	1
  2253  0EFF                     u1485:	
  2254  0EFF  1003               	clrc
  2255  0F00  0CF1               	rrf	___wmul@multiplier+1,f
  2256  0F01  0CF0               	rrf	___wmul@multiplier,f
  2257  0F02  3EFF               	addlw	-1
  2258  0F03  1D03               	skipz
  2259  0F04  2EFF               	goto	u1485
  2260  0F05  0871               	movf	___wmul@multiplier+1,w
  2261  0F06  0470               	iorwf	___wmul@multiplier,w
  2262  0F07  1D03               	skipz
  2263  0F08  2EEF               	goto	l1345
  2264  0F09  0875               	movf	___wmul@product+1,w
  2265  0F0A  01F1               	clrf	?___wmul+1
  2266  0F0B  07F1               	addwf	?___wmul+1,f
  2267  0F0C  0874               	movf	___wmul@product,w
  2268  0F0D  01F0               	clrf	?___wmul
  2269  0F0E  07F0               	addwf	?___wmul,f
  2270  0F0F  0008               	return
  2271  0F10                     __end_of___wmul:	
  2272                           
  2273                           	psect	text9
  2274  0FB2                     __ptext9:	
  2275 ;; *************** function ___llmod *****************
  2276 ;; Defined at:
  2277 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  divisor         4    0[BANK0 ] unsigned long 
  2280 ;;  dividend        4    4[BANK0 ] unsigned long 
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  counter         1    9[BANK0 ] unsigned char 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  4    0[BANK0 ] unsigned long 
  2285 ;; Registers used:
  2286 ;;		wreg, status,2, status,0
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2292 ;;      Params:         0       8       0       0       0
  2293 ;;      Locals:         0       1       0       0       0
  2294 ;;      Temps:          0       1       0       0       0
  2295 ;;      Totals:         0      10       0       0       0
  2296 ;;Total ram usage:       10 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; This function calls:
  2299 ;;		Nothing
  2300 ;; This function is called by:
  2301 ;;		_sprintf
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           
  2306                           ;psect for function ___llmod
  2307  0FB2                     ___llmod:	
  2308                           
  2309                           ;incstack = 0
  2310                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2311  0FB2  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0FB3  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0FB4  0823               	movf	___llmod@divisor+3,w
  2314  0FB5  0422               	iorwf	___llmod@divisor+2,w
  2315  0FB6  0421               	iorwf	___llmod@divisor+1,w
  2316  0FB7  0420               	iorwf	___llmod@divisor,w
  2317  0FB8  1903               	skipnz
  2318  0FB9  2FF7               	goto	l1467
  2319  0FBA  01A9               	clrf	___llmod@counter
  2320  0FBB  0AA9               	incf	___llmod@counter,f
  2321  0FBC                     l1457:	
  2322  0FBC  1BA3               	btfsc	___llmod@divisor+3,7
  2323  0FBD  2FCC               	goto	l1459
  2324  0FBE  3001               	movlw	1
  2325  0FBF  00A8               	movwf	??___llmod
  2326  0FC0                     u1825:	
  2327  0FC0  1003               	clrc
  2328  0FC1  0DA0               	rlf	___llmod@divisor,f
  2329  0FC2  0DA1               	rlf	___llmod@divisor+1,f
  2330  0FC3  0DA2               	rlf	___llmod@divisor+2,f
  2331  0FC4  0DA3               	rlf	___llmod@divisor+3,f
  2332  0FC5  0BA8               	decfsz	??___llmod,f
  2333  0FC6  2FC0               	goto	u1825
  2334  0FC7  3001               	movlw	1
  2335  0FC8  00A8               	movwf	??___llmod
  2336  0FC9  0828               	movf	??___llmod,w
  2337  0FCA  07A9               	addwf	___llmod@counter,f
  2338  0FCB  2FBC               	goto	l1457
  2339  0FCC                     l1459:	
  2340  0FCC  0823               	movf	___llmod@divisor+3,w
  2341  0FCD  0227               	subwf	___llmod@dividend+3,w
  2342  0FCE  1D03               	skipz
  2343  0FCF  2FDA               	goto	u1845
  2344  0FD0  0822               	movf	___llmod@divisor+2,w
  2345  0FD1  0226               	subwf	___llmod@dividend+2,w
  2346  0FD2  1D03               	skipz
  2347  0FD3  2FDA               	goto	u1845
  2348  0FD4  0821               	movf	___llmod@divisor+1,w
  2349  0FD5  0225               	subwf	___llmod@dividend+1,w
  2350  0FD6  1D03               	skipz
  2351  0FD7  2FDA               	goto	u1845
  2352  0FD8  0820               	movf	___llmod@divisor,w
  2353  0FD9  0224               	subwf	___llmod@dividend,w
  2354  0FDA                     u1845:	
  2355  0FDA  1C03               	skipc
  2356  0FDB  2FEA               	goto	l1463
  2357  0FDC  0820               	movf	___llmod@divisor,w
  2358  0FDD  02A4               	subwf	___llmod@dividend,f
  2359  0FDE  0821               	movf	___llmod@divisor+1,w
  2360  0FDF  1C03               	skipc
  2361  0FE0  0F21               	incfsz	___llmod@divisor+1,w
  2362  0FE1  02A5               	subwf	___llmod@dividend+1,f
  2363  0FE2  0822               	movf	___llmod@divisor+2,w
  2364  0FE3  1C03               	skipc
  2365  0FE4  0F22               	incfsz	___llmod@divisor+2,w
  2366  0FE5  02A6               	subwf	___llmod@dividend+2,f
  2367  0FE6  0823               	movf	___llmod@divisor+3,w
  2368  0FE7  1C03               	skipc
  2369  0FE8  0F23               	incfsz	___llmod@divisor+3,w
  2370  0FE9  02A7               	subwf	___llmod@dividend+3,f
  2371  0FEA                     l1463:	
  2372  0FEA  3001               	movlw	1
  2373  0FEB                     u1855:	
  2374  0FEB  1003               	clrc
  2375  0FEC  0CA3               	rrf	___llmod@divisor+3,f
  2376  0FED  0CA2               	rrf	___llmod@divisor+2,f
  2377  0FEE  0CA1               	rrf	___llmod@divisor+1,f
  2378  0FEF  0CA0               	rrf	___llmod@divisor,f
  2379  0FF0  3EFF               	addlw	-1
  2380  0FF1  1D03               	skipz
  2381  0FF2  2FEB               	goto	u1855
  2382  0FF3  3001               	movlw	1
  2383  0FF4  02A9               	subwf	___llmod@counter,f
  2384  0FF5  1D03               	btfss	3,2
  2385  0FF6  2FCC               	goto	l1459
  2386  0FF7                     l1467:	
  2387  0FF7  0827               	movf	___llmod@dividend+3,w
  2388  0FF8  00A3               	movwf	?___llmod+3
  2389  0FF9  0826               	movf	___llmod@dividend+2,w
  2390  0FFA  00A2               	movwf	?___llmod+2
  2391  0FFB  0825               	movf	___llmod@dividend+1,w
  2392  0FFC  00A1               	movwf	?___llmod+1
  2393  0FFD  0824               	movf	___llmod@dividend,w
  2394  0FFE  00A0               	movwf	?___llmod
  2395  0FFF  0008               	return
  2396  1000                     __end_of___llmod:	
  2397                           
  2398                           	psect	text10
  2399  00AA                     __ptext10:	
  2400 ;; *************** function ___lldiv *****************
  2401 ;; Defined at:
  2402 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  divisor         4    0[COMMON] unsigned long 
  2405 ;;  dividend        4    4[COMMON] unsigned long 
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;  quotient        4    9[COMMON] unsigned long 
  2408 ;;  counter         1   13[COMMON] unsigned char 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  4    0[COMMON] unsigned long 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2418 ;;      Params:         8       0       0       0       0
  2419 ;;      Locals:         5       0       0       0       0
  2420 ;;      Temps:          1       0       0       0       0
  2421 ;;      Totals:        14       0       0       0       0
  2422 ;;Total ram usage:       14 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_sprintf
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function ___lldiv
  2433  00AA                     ___lldiv:	
  2434                           
  2435                           ;incstack = 0
  2436                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2437  00AA  3000               	movlw	0
  2438  00AB  00FC               	movwf	___lldiv@quotient+3
  2439  00AC  3000               	movlw	0
  2440  00AD  00FB               	movwf	___lldiv@quotient+2
  2441  00AE  3000               	movlw	0
  2442  00AF  00FA               	movwf	___lldiv@quotient+1
  2443  00B0  3000               	movlw	0
  2444  00B1  00F9               	movwf	___lldiv@quotient
  2445  00B2  0873               	movf	___lldiv@divisor+3,w
  2446  00B3  0472               	iorwf	___lldiv@divisor+2,w
  2447  00B4  0471               	iorwf	___lldiv@divisor+1,w
  2448  00B5  0470               	iorwf	___lldiv@divisor,w
  2449  00B6  1903               	skipnz
  2450  00B7  28FF               	goto	l1447
  2451  00B8  01FD               	clrf	___lldiv@counter
  2452  00B9  0AFD               	incf	___lldiv@counter,f
  2453  00BA                     l1433:	
  2454  00BA  1BF3               	btfsc	___lldiv@divisor+3,7
  2455  00BB  28CA               	goto	l1435
  2456  00BC  3001               	movlw	1
  2457  00BD  00F8               	movwf	??___lldiv
  2458  00BE                     u1755:	
  2459  00BE  1003               	clrc
  2460  00BF  0DF0               	rlf	___lldiv@divisor,f
  2461  00C0  0DF1               	rlf	___lldiv@divisor+1,f
  2462  00C1  0DF2               	rlf	___lldiv@divisor+2,f
  2463  00C2  0DF3               	rlf	___lldiv@divisor+3,f
  2464  00C3  0BF8               	decfsz	??___lldiv,f
  2465  00C4  28BE               	goto	u1755
  2466  00C5  3001               	movlw	1
  2467  00C6  00F8               	movwf	??___lldiv
  2468  00C7  0878               	movf	??___lldiv,w
  2469  00C8  07FD               	addwf	___lldiv@counter,f
  2470  00C9  28BA               	goto	l1433
  2471  00CA                     l1435:	
  2472  00CA  3001               	movlw	1
  2473  00CB  00F8               	movwf	??___lldiv
  2474  00CC                     u1775:	
  2475  00CC  1003               	clrc
  2476  00CD  0DF9               	rlf	___lldiv@quotient,f
  2477  00CE  0DFA               	rlf	___lldiv@quotient+1,f
  2478  00CF  0DFB               	rlf	___lldiv@quotient+2,f
  2479  00D0  0DFC               	rlf	___lldiv@quotient+3,f
  2480  00D1  0BF8               	decfsz	??___lldiv,f
  2481  00D2  28CC               	goto	u1775
  2482  00D3  0873               	movf	___lldiv@divisor+3,w
  2483  00D4  0277               	subwf	___lldiv@dividend+3,w
  2484  00D5  1D03               	skipz
  2485  00D6  28E1               	goto	u1785
  2486  00D7  0872               	movf	___lldiv@divisor+2,w
  2487  00D8  0276               	subwf	___lldiv@dividend+2,w
  2488  00D9  1D03               	skipz
  2489  00DA  28E1               	goto	u1785
  2490  00DB  0871               	movf	___lldiv@divisor+1,w
  2491  00DC  0275               	subwf	___lldiv@dividend+1,w
  2492  00DD  1D03               	skipz
  2493  00DE  28E1               	goto	u1785
  2494  00DF  0870               	movf	___lldiv@divisor,w
  2495  00E0  0274               	subwf	___lldiv@dividend,w
  2496  00E1                     u1785:	
  2497  00E1  1C03               	skipc
  2498  00E2  28F2               	goto	l1443
  2499  00E3  0870               	movf	___lldiv@divisor,w
  2500  00E4  02F4               	subwf	___lldiv@dividend,f
  2501  00E5  0871               	movf	___lldiv@divisor+1,w
  2502  00E6  1C03               	skipc
  2503  00E7  0F71               	incfsz	___lldiv@divisor+1,w
  2504  00E8  02F5               	subwf	___lldiv@dividend+1,f
  2505  00E9  0872               	movf	___lldiv@divisor+2,w
  2506  00EA  1C03               	skipc
  2507  00EB  0F72               	incfsz	___lldiv@divisor+2,w
  2508  00EC  02F6               	subwf	___lldiv@dividend+2,f
  2509  00ED  0873               	movf	___lldiv@divisor+3,w
  2510  00EE  1C03               	skipc
  2511  00EF  0F73               	incfsz	___lldiv@divisor+3,w
  2512  00F0  02F7               	subwf	___lldiv@dividend+3,f
  2513  00F1  1479               	bsf	___lldiv@quotient,0
  2514  00F2                     l1443:	
  2515  00F2  3001               	movlw	1
  2516  00F3                     u1795:	
  2517  00F3  1003               	clrc
  2518  00F4  0CF3               	rrf	___lldiv@divisor+3,f
  2519  00F5  0CF2               	rrf	___lldiv@divisor+2,f
  2520  00F6  0CF1               	rrf	___lldiv@divisor+1,f
  2521  00F7  0CF0               	rrf	___lldiv@divisor,f
  2522  00F8  3EFF               	addlw	-1
  2523  00F9  1D03               	skipz
  2524  00FA  28F3               	goto	u1795
  2525  00FB  3001               	movlw	1
  2526  00FC  02FD               	subwf	___lldiv@counter,f
  2527  00FD  1D03               	btfss	3,2
  2528  00FE  28CA               	goto	l1435
  2529  00FF                     l1447:	
  2530  00FF  087C               	movf	___lldiv@quotient+3,w
  2531  0100  00F3               	movwf	?___lldiv+3
  2532  0101  087B               	movf	___lldiv@quotient+2,w
  2533  0102  00F2               	movwf	?___lldiv+2
  2534  0103  087A               	movf	___lldiv@quotient+1,w
  2535  0104  00F1               	movwf	?___lldiv+1
  2536  0105  0879               	movf	___lldiv@quotient,w
  2537  0106  00F0               	movwf	?___lldiv
  2538  0107  0008               	return
  2539  0108                     __end_of___lldiv:	
  2540                           
  2541                           	psect	text11
  2542  0F10                     __ptext11:	
  2543 ;; *************** function ___lltoft *****************
  2544 ;; Defined at:
  2545 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  c               4    8[COMMON] unsigned long 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  exp             1   13[COMMON] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  3    8[COMMON] float 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, pclath, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2559 ;;      Params:         4       0       0       0       0
  2560 ;;      Locals:         1       0       0       0       0
  2561 ;;      Temps:          1       0       0       0       0
  2562 ;;      Totals:         6       0       0       0       0
  2563 ;;Total ram usage:        6 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    1
  2566 ;; This function calls:
  2567 ;;		___ftpack
  2568 ;; This function is called by:
  2569 ;;		_ftoa
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           
  2574                           ;psect for function ___lltoft
  2575  0F10                     ___lltoft:	
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  2579  0F10  308E               	movlw	142
  2580  0F11  00FC               	movwf	??___lltoft
  2581  0F12  087C               	movf	??___lltoft,w
  2582  0F13  00FD               	movwf	___lltoft@exp
  2583  0F14                     l1737:	
  2584  0F14  30FF               	movlw	255
  2585  0F15  057B               	andwf	___lltoft@c+3,w
  2586  0F16  1903               	btfsc	3,2
  2587  0F17  2F26               	goto	l1739
  2588  0F18  3001               	movlw	1
  2589  0F19                     u2385:	
  2590  0F19  1003               	clrc
  2591  0F1A  0CFB               	rrf	___lltoft@c+3,f
  2592  0F1B  0CFA               	rrf	___lltoft@c+2,f
  2593  0F1C  0CF9               	rrf	___lltoft@c+1,f
  2594  0F1D  0CF8               	rrf	___lltoft@c,f
  2595  0F1E  3EFF               	addlw	-1
  2596  0F1F  1D03               	skipz
  2597  0F20  2F19               	goto	u2385
  2598  0F21  3001               	movlw	1
  2599  0F22  00FC               	movwf	??___lltoft
  2600  0F23  087C               	movf	??___lltoft,w
  2601  0F24  07FD               	addwf	___lltoft@exp,f
  2602  0F25  2F14               	goto	l1737
  2603  0F26                     l1739:	
  2604  0F26  0878               	movf	___lltoft@c,w
  2605  0F27  00F0               	movwf	___ftpack@arg
  2606  0F28  0879               	movf	___lltoft@c+1,w
  2607  0F29  00F1               	movwf	___ftpack@arg+1
  2608  0F2A  087A               	movf	___lltoft@c+2,w
  2609  0F2B  00F2               	movwf	___ftpack@arg+2
  2610  0F2C  087D               	movf	___lltoft@exp,w
  2611  0F2D  00FC               	movwf	??___lltoft
  2612  0F2E  087C               	movf	??___lltoft,w
  2613  0F2F  00F3               	movwf	___ftpack@exp
  2614  0F30  01F4               	clrf	___ftpack@sign
  2615  0F31  118A  2108         	fcall	___ftpack
  2616  0F33  0870               	movf	?___ftpack,w
  2617  0F34  00F8               	movwf	?___lltoft
  2618  0F35  0871               	movf	?___ftpack+1,w
  2619  0F36  00F9               	movwf	?___lltoft+1
  2620  0F37  0872               	movf	?___ftpack+2,w
  2621  0F38  00FA               	movwf	?___lltoft+2
  2622  0F39  0008               	return
  2623  0F3A                     __end_of___lltoft:	
  2624                           
  2625                           	psect	text12
  2626  0170                     __ptext12:	
  2627 ;; *************** function ___fttol *****************
  2628 ;; Defined at:
  2629 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  f1              3   16[BANK0 ] float 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  lval            4   25[BANK0 ] unsigned long 
  2634 ;;  exp1            1   29[BANK0 ] unsigned char 
  2635 ;;  sign1           1   24[BANK0 ] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  4   16[BANK0 ] long 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2645 ;;      Params:         0       4       0       0       0
  2646 ;;      Locals:         0       6       0       0       0
  2647 ;;      Temps:          0       4       0       0       0
  2648 ;;      Totals:         0      14       0       0       0
  2649 ;;Total ram usage:       14 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_ftoa
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           
  2659                           ;psect for function ___fttol
  2660  0170                     ___fttol:	
  2661                           
  2662                           ;incstack = 0
  2663                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2664  0170  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0171  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0172  0830               	movf	___fttol@f1,w
  2667  0173  00B4               	movwf	??___fttol
  2668  0174  0831               	movf	___fttol@f1+1,w
  2669  0175  00B5               	movwf	??___fttol+1
  2670  0176  0832               	movf	___fttol@f1+2,w
  2671  0177  00B6               	movwf	??___fttol+2
  2672  0178  1003               	clrc
  2673  0179  0D35               	rlf	??___fttol+1,w
  2674  017A  0D36               	rlf	??___fttol+2,w
  2675  017B  00B7               	movwf	??___fttol+3
  2676  017C  0837               	movf	??___fttol+3,w
  2677  017D  00BD               	movwf	___fttol@exp1
  2678  017E  08BD               	movf	___fttol@exp1,f
  2679  017F  1D03               	skipz
  2680  0180  298A               	goto	l1695
  2681  0181  3000               	movlw	0
  2682  0182  00B3               	movwf	?___fttol+3
  2683  0183  3000               	movlw	0
  2684  0184  00B2               	movwf	?___fttol+2
  2685  0185  3000               	movlw	0
  2686  0186  00B1               	movwf	?___fttol+1
  2687  0187  3000               	movlw	0
  2688  0188  00B0               	movwf	?___fttol
  2689  0189  0008               	return
  2690  018A                     l1695:	
  2691  018A  0830               	movf	___fttol@f1,w
  2692  018B  00B4               	movwf	??___fttol
  2693  018C  0831               	movf	___fttol@f1+1,w
  2694  018D  00B5               	movwf	??___fttol+1
  2695  018E  0832               	movf	___fttol@f1+2,w
  2696  018F  00B6               	movwf	??___fttol+2
  2697  0190  3017               	movlw	23
  2698  0191                     u2295:	
  2699  0191  1003               	clrc
  2700  0192  0CB6               	rrf	??___fttol+2,f
  2701  0193  0CB5               	rrf	??___fttol+1,f
  2702  0194  0CB4               	rrf	??___fttol,f
  2703  0195  3EFF               	addlw	-1
  2704  0196  1D03               	skipz
  2705  0197  2991               	goto	u2295
  2706  0198  0834               	movf	??___fttol,w
  2707  0199  00B7               	movwf	??___fttol+3
  2708  019A  0837               	movf	??___fttol+3,w
  2709  019B  00B8               	movwf	___fttol@sign1
  2710  019C  17B1               	bsf	___fttol@f1+1,7
  2711  019D  30FF               	movlw	255
  2712  019E  05B0               	andwf	___fttol@f1,f
  2713  019F  30FF               	movlw	255
  2714  01A0  05B1               	andwf	___fttol@f1+1,f
  2715  01A1  3000               	movlw	0
  2716  01A2  05B2               	andwf	___fttol@f1+2,f
  2717  01A3  0830               	movf	___fttol@f1,w
  2718  01A4  00B9               	movwf	___fttol@lval
  2719  01A5  0831               	movf	___fttol@f1+1,w
  2720  01A6  00BA               	movwf	___fttol@lval+1
  2721  01A7  0832               	movf	___fttol@f1+2,w
  2722  01A8  00BB               	movwf	___fttol@lval+2
  2723  01A9  01BC               	clrf	___fttol@lval+3
  2724  01AA  308E               	movlw	142
  2725  01AB  02BD               	subwf	___fttol@exp1,f
  2726  01AC  1FBD               	btfss	___fttol@exp1,7
  2727  01AD  29CC               	goto	l1715
  2728  01AE  083D               	movf	___fttol@exp1,w
  2729  01AF  3A80               	xorlw	128
  2730  01B0  3E8F               	addlw	143
  2731  01B1  1803               	skipnc
  2732  01B2  29BC               	goto	l1713
  2733  01B3  3000               	movlw	0
  2734  01B4  00B3               	movwf	?___fttol+3
  2735  01B5  3000               	movlw	0
  2736  01B6  00B2               	movwf	?___fttol+2
  2737  01B7  3000               	movlw	0
  2738  01B8  00B1               	movwf	?___fttol+1
  2739  01B9  3000               	movlw	0
  2740  01BA  00B0               	movwf	?___fttol
  2741  01BB  0008               	return
  2742  01BC                     l1713:	
  2743  01BC  3001               	movlw	1
  2744  01BD                     u2325:	
  2745  01BD  1003               	clrc
  2746  01BE  0CBC               	rrf	___fttol@lval+3,f
  2747  01BF  0CBB               	rrf	___fttol@lval+2,f
  2748  01C0  0CBA               	rrf	___fttol@lval+1,f
  2749  01C1  0CB9               	rrf	___fttol@lval,f
  2750  01C2  3EFF               	addlw	-1
  2751  01C3  1D03               	skipz
  2752  01C4  29BD               	goto	u2325
  2753  01C5  3001               	movlw	1
  2754  01C6  00B4               	movwf	??___fttol
  2755  01C7  0834               	movf	??___fttol,w
  2756  01C8  07BD               	addwf	___fttol@exp1,f
  2757  01C9  1903               	btfsc	3,2
  2758  01CA  29E7               	goto	l1725
  2759  01CB  29BC               	goto	l1713
  2760  01CC                     l1715:	
  2761  01CC  3018               	movlw	24
  2762  01CD  023D               	subwf	___fttol@exp1,w
  2763  01CE  1C03               	skipc
  2764  01CF  29E4               	goto	l1723
  2765  01D0  3000               	movlw	0
  2766  01D1  00B3               	movwf	?___fttol+3
  2767  01D2  3000               	movlw	0
  2768  01D3  00B2               	movwf	?___fttol+2
  2769  01D4  3000               	movlw	0
  2770  01D5  00B1               	movwf	?___fttol+1
  2771  01D6  3000               	movlw	0
  2772  01D7  00B0               	movwf	?___fttol
  2773  01D8  0008               	return
  2774  01D9                     l1721:	
  2775  01D9  3001               	movlw	1
  2776  01DA  00B4               	movwf	??___fttol
  2777  01DB                     u2355:	
  2778  01DB  1003               	clrc
  2779  01DC  0DB9               	rlf	___fttol@lval,f
  2780  01DD  0DBA               	rlf	___fttol@lval+1,f
  2781  01DE  0DBB               	rlf	___fttol@lval+2,f
  2782  01DF  0DBC               	rlf	___fttol@lval+3,f
  2783  01E0  0BB4               	decfsz	??___fttol,f
  2784  01E1  29DB               	goto	u2355
  2785  01E2  3001               	movlw	1
  2786  01E3  02BD               	subwf	___fttol@exp1,f
  2787  01E4                     l1723:	
  2788  01E4  08BD               	movf	___fttol@exp1,f
  2789  01E5  1D03               	skipz
  2790  01E6  29D9               	goto	l1721
  2791  01E7                     l1725:	
  2792  01E7  0838               	movf	___fttol@sign1,w
  2793  01E8  1903               	btfsc	3,2
  2794  01E9  29F5               	goto	l1729
  2795  01EA  09B9               	comf	___fttol@lval,f
  2796  01EB  09BA               	comf	___fttol@lval+1,f
  2797  01EC  09BB               	comf	___fttol@lval+2,f
  2798  01ED  09BC               	comf	___fttol@lval+3,f
  2799  01EE  0AB9               	incf	___fttol@lval,f
  2800  01EF  1903               	skipnz
  2801  01F0  0ABA               	incf	___fttol@lval+1,f
  2802  01F1  1903               	skipnz
  2803  01F2  0ABB               	incf	___fttol@lval+2,f
  2804  01F3  1903               	skipnz
  2805  01F4  0ABC               	incf	___fttol@lval+3,f
  2806  01F5                     l1729:	
  2807  01F5  083C               	movf	___fttol@lval+3,w
  2808  01F6  00B3               	movwf	?___fttol+3
  2809  01F7  083B               	movf	___fttol@lval+2,w
  2810  01F8  00B2               	movwf	?___fttol+2
  2811  01F9  083A               	movf	___fttol@lval+1,w
  2812  01FA  00B1               	movwf	?___fttol+1
  2813  01FB  0839               	movf	___fttol@lval,w
  2814  01FC  00B0               	movwf	?___fttol
  2815  01FD  0008               	return
  2816  01FE                     __end_of___fttol:	
  2817                           
  2818                           	psect	text13
  2819  0E7A                     __ptext13:	
  2820 ;; *************** function ___ftsub *****************
  2821 ;; Defined at:
  2822 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  f2              3    7[BANK0 ] float 
  2825 ;;  f1              3   10[BANK0 ] float 
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  3    7[BANK0 ] float 
  2830 ;; Registers used:
  2831 ;;		wreg, status,2, status,0, pclath, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2837 ;;      Params:         0       6       0       0       0
  2838 ;;      Locals:         0       0       0       0       0
  2839 ;;      Temps:          0       0       0       0       0
  2840 ;;      Totals:         0       6       0       0       0
  2841 ;;Total ram usage:        6 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    2
  2844 ;; This function calls:
  2845 ;;		___ftadd
  2846 ;; This function is called by:
  2847 ;;		_ftoa
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           
  2852                           ;psect for function ___ftsub
  2853  0E7A                     ___ftsub:	
  2854                           
  2855                           ;incstack = 0
  2856                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  2857  0E7A  3080               	movlw	128
  2858  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  2859  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  2860  0E7D  06A9               	xorwf	___ftsub@f2+2,f
  2861  0E7E  082A               	movf	___ftsub@f1,w
  2862  0E7F  00F8               	movwf	___ftadd@f1
  2863  0E80  082B               	movf	___ftsub@f1+1,w
  2864  0E81  00F9               	movwf	___ftadd@f1+1
  2865  0E82  082C               	movf	___ftsub@f1+2,w
  2866  0E83  00FA               	movwf	___ftadd@f1+2
  2867  0E84  0827               	movf	___ftsub@f2,w
  2868  0E85  00FB               	movwf	___ftadd@f2
  2869  0E86  0828               	movf	___ftsub@f2+1,w
  2870  0E87  00FC               	movwf	___ftadd@f2+1
  2871  0E88  0829               	movf	___ftsub@f2+2,w
  2872  0E89  00FD               	movwf	___ftadd@f2+2
  2873  0E8A  118A  24E3         	fcall	___ftadd
  2874  0E8C  0878               	movf	?___ftadd,w
  2875  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  2876  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  2877  0E8F  00A7               	movwf	?___ftsub
  2878  0E90  0879               	movf	?___ftadd+1,w
  2879  0E91  00A8               	movwf	?___ftsub+1
  2880  0E92  087A               	movf	?___ftadd+2,w
  2881  0E93  00A9               	movwf	?___ftsub+2
  2882  0E94  0008               	return
  2883  0E95                     __end_of___ftsub:	
  2884                           
  2885                           	psect	text14
  2886  04E3                     __ptext14:	
  2887 ;; *************** function ___ftadd *****************
  2888 ;; Defined at:
  2889 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  f1              3    8[COMMON] float 
  2892 ;;  f2              3   11[COMMON] float 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  exp1            1    6[BANK0 ] unsigned char 
  2895 ;;  exp2            1    5[BANK0 ] unsigned char 
  2896 ;;  sign            1    4[BANK0 ] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  3    8[COMMON] float 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0, pclath, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         6       0       0       0       0
  2907 ;;      Locals:         0       3       0       0       0
  2908 ;;      Temps:          0       4       0       0       0
  2909 ;;      Totals:         6       7       0       0       0
  2910 ;;Total ram usage:       13 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    1
  2913 ;; This function calls:
  2914 ;;		___ftpack
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;;		___ftsub
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function ___ftadd
  2923  04E3                     ___ftadd:	
  2924                           
  2925                           ;incstack = 0
  2926                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2927  04E3  0878               	movf	___ftadd@f1,w
  2928  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2929  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  2930  04E6  00A0               	movwf	??___ftadd
  2931  04E7  0879               	movf	___ftadd@f1+1,w
  2932  04E8  00A1               	movwf	??___ftadd+1
  2933  04E9  087A               	movf	___ftadd@f1+2,w
  2934  04EA  00A2               	movwf	??___ftadd+2
  2935  04EB  1003               	clrc
  2936  04EC  0D21               	rlf	??___ftadd+1,w
  2937  04ED  0D22               	rlf	??___ftadd+2,w
  2938  04EE  00A3               	movwf	??___ftadd+3
  2939  04EF  0823               	movf	??___ftadd+3,w
  2940  04F0  00A6               	movwf	___ftadd@exp1
  2941  04F1  087B               	movf	___ftadd@f2,w
  2942  04F2  00A0               	movwf	??___ftadd
  2943  04F3  087C               	movf	___ftadd@f2+1,w
  2944  04F4  00A1               	movwf	??___ftadd+1
  2945  04F5  087D               	movf	___ftadd@f2+2,w
  2946  04F6  00A2               	movwf	??___ftadd+2
  2947  04F7  1003               	clrc
  2948  04F8  0D21               	rlf	??___ftadd+1,w
  2949  04F9  0D22               	rlf	??___ftadd+2,w
  2950  04FA  00A3               	movwf	??___ftadd+3
  2951  04FB  0823               	movf	??___ftadd+3,w
  2952  04FC  00A5               	movwf	___ftadd@exp2
  2953  04FD  0826               	movf	___ftadd@exp1,w
  2954  04FE  1903               	btfsc	3,2
  2955  04FF  2D0C               	goto	l1363
  2956  0500  0825               	movf	___ftadd@exp2,w
  2957  0501  0226               	subwf	___ftadd@exp1,w
  2958  0502  1803               	skipnc
  2959  0503  2D13               	goto	l1367
  2960  0504  0326               	decf	___ftadd@exp1,w
  2961  0505  3AFF               	xorlw	255
  2962  0506  0725               	addwf	___ftadd@exp2,w
  2963  0507  00A0               	movwf	??___ftadd
  2964  0508  3019               	movlw	25
  2965  0509  0220               	subwf	??___ftadd,w
  2966  050A  1C03               	skipc
  2967  050B  2D13               	goto	l1367
  2968  050C                     l1363:	
  2969  050C  087B               	movf	___ftadd@f2,w
  2970  050D  00F8               	movwf	?___ftadd
  2971  050E  087C               	movf	___ftadd@f2+1,w
  2972  050F  00F9               	movwf	?___ftadd+1
  2973  0510  087D               	movf	___ftadd@f2+2,w
  2974  0511  00FA               	movwf	?___ftadd+2
  2975  0512  0008               	return
  2976  0513                     l1367:	
  2977  0513  0825               	movf	___ftadd@exp2,w
  2978  0514  1903               	btfsc	3,2
  2979  0515  0008               	return
  2980  0516  0826               	movf	___ftadd@exp1,w
  2981  0517  0225               	subwf	___ftadd@exp2,w
  2982  0518  1803               	skipnc
  2983  0519  2D22               	goto	l1373
  2984  051A  0325               	decf	___ftadd@exp2,w
  2985  051B  3AFF               	xorlw	255
  2986  051C  0726               	addwf	___ftadd@exp1,w
  2987  051D  00A0               	movwf	??___ftadd
  2988  051E  3019               	movlw	25
  2989  051F  0220               	subwf	??___ftadd,w
  2990  0520  1803               	btfsc	3,0
  2991  0521  0008               	return
  2992  0522                     l1373:	
  2993  0522  3006               	movlw	6
  2994  0523  00A0               	movwf	??___ftadd
  2995  0524  0820               	movf	??___ftadd,w
  2996  0525  00A4               	movwf	___ftadd@sign
  2997  0526  1BFA               	btfsc	___ftadd@f1+2,7
  2998  0527  17A4               	bsf	___ftadd@sign,7
  2999  0528  1BFD               	btfsc	___ftadd@f2+2,7
  3000  0529  1724               	bsf	___ftadd@sign,6
  3001  052A  17F9               	bsf	___ftadd@f1+1,7
  3002  052B  30FF               	movlw	255
  3003  052C  05F8               	andwf	___ftadd@f1,f
  3004  052D  30FF               	movlw	255
  3005  052E  05F9               	andwf	___ftadd@f1+1,f
  3006  052F  3000               	movlw	0
  3007  0530  05FA               	andwf	___ftadd@f1+2,f
  3008  0531  17FC               	bsf	___ftadd@f2+1,7
  3009  0532  30FF               	movlw	255
  3010  0533  05FB               	andwf	___ftadd@f2,f
  3011  0534  30FF               	movlw	255
  3012  0535  05FC               	andwf	___ftadd@f2+1,f
  3013  0536  3000               	movlw	0
  3014  0537  05FD               	andwf	___ftadd@f2+2,f
  3015  0538  0825               	movf	___ftadd@exp2,w
  3016  0539  0226               	subwf	___ftadd@exp1,w
  3017  053A  1803               	skipnc
  3018  053B  2D62               	goto	l1395
  3019  053C                     l1385:	
  3020  053C  3001               	movlw	1
  3021  053D                     u1595:	
  3022  053D  1003               	clrc
  3023  053E  0DFB               	rlf	___ftadd@f2,f
  3024  053F  0DFC               	rlf	___ftadd@f2+1,f
  3025  0540  0DFD               	rlf	___ftadd@f2+2,f
  3026  0541  3EFF               	addlw	-1
  3027  0542  1D03               	skipz
  3028  0543  2D3D               	goto	u1595
  3029  0544  3001               	movlw	1
  3030  0545  02A5               	subwf	___ftadd@exp2,f
  3031  0546  0825               	movf	___ftadd@exp2,w
  3032  0547  0626               	xorwf	___ftadd@exp1,w
  3033  0548  1903               	skipnz
  3034  0549  2D5D               	goto	l1393
  3035  054A  3001               	movlw	1
  3036  054B  02A4               	subwf	___ftadd@sign,f
  3037  054C  0824               	movf	___ftadd@sign,w
  3038  054D  3907               	andlw	7
  3039  054E  1903               	btfsc	3,2
  3040  054F  2D5D               	goto	l1393
  3041  0550  2D3C               	goto	l1385
  3042  0551                     l1391:	
  3043  0551  3001               	movlw	1
  3044  0552                     u1625:	
  3045  0552  1003               	clrc
  3046  0553  0CFA               	rrf	___ftadd@f1+2,f
  3047  0554  0CF9               	rrf	___ftadd@f1+1,f
  3048  0555  0CF8               	rrf	___ftadd@f1,f
  3049  0556  3EFF               	addlw	-1
  3050  0557  1D03               	skipz
  3051  0558  2D52               	goto	u1625
  3052  0559  3001               	movlw	1
  3053  055A  00A0               	movwf	??___ftadd
  3054  055B  0820               	movf	??___ftadd,w
  3055  055C  07A6               	addwf	___ftadd@exp1,f
  3056  055D                     l1393:	
  3057  055D  0826               	movf	___ftadd@exp1,w
  3058  055E  0625               	xorwf	___ftadd@exp2,w
  3059  055F  1903               	btfsc	3,2
  3060  0560  2D8B               	goto	l413
  3061  0561  2D51               	goto	l1391
  3062  0562                     l1395:	
  3063  0562  0826               	movf	___ftadd@exp1,w
  3064  0563  0225               	subwf	___ftadd@exp2,w
  3065  0564  1803               	skipnc
  3066  0565  2D8B               	goto	l413
  3067  0566                     l1397:	
  3068  0566  3001               	movlw	1
  3069  0567                     u1655:	
  3070  0567  1003               	clrc
  3071  0568  0DF8               	rlf	___ftadd@f1,f
  3072  0569  0DF9               	rlf	___ftadd@f1+1,f
  3073  056A  0DFA               	rlf	___ftadd@f1+2,f
  3074  056B  3EFF               	addlw	-1
  3075  056C  1D03               	skipz
  3076  056D  2D67               	goto	u1655
  3077  056E  3001               	movlw	1
  3078  056F  02A6               	subwf	___ftadd@exp1,f
  3079  0570  0825               	movf	___ftadd@exp2,w
  3080  0571  0626               	xorwf	___ftadd@exp1,w
  3081  0572  1903               	skipnz
  3082  0573  2D87               	goto	l1405
  3083  0574  3001               	movlw	1
  3084  0575  02A4               	subwf	___ftadd@sign,f
  3085  0576  0824               	movf	___ftadd@sign,w
  3086  0577  3907               	andlw	7
  3087  0578  1903               	btfsc	3,2
  3088  0579  2D87               	goto	l1405
  3089  057A  2D66               	goto	l1397
  3090  057B                     l1403:	
  3091  057B  3001               	movlw	1
  3092  057C                     u1685:	
  3093  057C  1003               	clrc
  3094  057D  0CFD               	rrf	___ftadd@f2+2,f
  3095  057E  0CFC               	rrf	___ftadd@f2+1,f
  3096  057F  0CFB               	rrf	___ftadd@f2,f
  3097  0580  3EFF               	addlw	-1
  3098  0581  1D03               	skipz
  3099  0582  2D7C               	goto	u1685
  3100  0583  3001               	movlw	1
  3101  0584  00A0               	movwf	??___ftadd
  3102  0585  0820               	movf	??___ftadd,w
  3103  0586  07A5               	addwf	___ftadd@exp2,f
  3104  0587                     l1405:	
  3105  0587  0826               	movf	___ftadd@exp1,w
  3106  0588  0625               	xorwf	___ftadd@exp2,w
  3107  0589  1D03               	skipz
  3108  058A  2D7B               	goto	l1403
  3109  058B                     l413:	
  3110  058B  1FA4               	btfss	___ftadd@sign,7
  3111  058C  2D9D               	goto	l1409
  3112  058D  30FF               	movlw	255
  3113  058E  06F8               	xorwf	___ftadd@f1,f
  3114  058F  30FF               	movlw	255
  3115  0590  06F9               	xorwf	___ftadd@f1+1,f
  3116  0591  30FF               	movlw	255
  3117  0592  06FA               	xorwf	___ftadd@f1+2,f
  3118  0593  3001               	movlw	1
  3119  0594  07F8               	addwf	___ftadd@f1,f
  3120  0595  3000               	movlw	0
  3121  0596  1803               	skipnc
  3122  0597  3001               	movlw	1
  3123  0598  07F9               	addwf	___ftadd@f1+1,f
  3124  0599  3000               	movlw	0
  3125  059A  1803               	skipnc
  3126  059B  3001               	movlw	1
  3127  059C  07FA               	addwf	___ftadd@f1+2,f
  3128  059D                     l1409:	
  3129  059D  1F24               	btfss	___ftadd@sign,6
  3130  059E  2DAF               	goto	l1413
  3131  059F  30FF               	movlw	255
  3132  05A0  06FB               	xorwf	___ftadd@f2,f
  3133  05A1  30FF               	movlw	255
  3134  05A2  06FC               	xorwf	___ftadd@f2+1,f
  3135  05A3  30FF               	movlw	255
  3136  05A4  06FD               	xorwf	___ftadd@f2+2,f
  3137  05A5  3001               	movlw	1
  3138  05A6  07FB               	addwf	___ftadd@f2,f
  3139  05A7  3000               	movlw	0
  3140  05A8  1803               	skipnc
  3141  05A9  3001               	movlw	1
  3142  05AA  07FC               	addwf	___ftadd@f2+1,f
  3143  05AB  3000               	movlw	0
  3144  05AC  1803               	skipnc
  3145  05AD  3001               	movlw	1
  3146  05AE  07FD               	addwf	___ftadd@f2+2,f
  3147  05AF                     l1413:	
  3148  05AF  01A4               	clrf	___ftadd@sign
  3149  05B0  0878               	movf	___ftadd@f1,w
  3150  05B1  07FB               	addwf	___ftadd@f2,f
  3151  05B2  0879               	movf	___ftadd@f1+1,w
  3152  05B3  1103               	clrz
  3153  05B4  1803               	skipnc
  3154  05B5  0A79               	incf	___ftadd@f1+1,w
  3155  05B6  1D03               	btfss	3,2
  3156  05B7  07FC               	addwf	___ftadd@f2+1,f
  3157  05B8  087A               	movf	___ftadd@f1+2,w
  3158  05B9  1103               	clrz
  3159  05BA  1803               	skipnc
  3160  05BB  0A7A               	incf	___ftadd@f1+2,w
  3161  05BC  1D03               	btfss	3,2
  3162  05BD  07FD               	addwf	___ftadd@f2+2,f
  3163  05BE  1FFD               	btfss	___ftadd@f2+2,7
  3164  05BF  2DD2               	goto	l1423
  3165  05C0  30FF               	movlw	255
  3166  05C1  06FB               	xorwf	___ftadd@f2,f
  3167  05C2  30FF               	movlw	255
  3168  05C3  06FC               	xorwf	___ftadd@f2+1,f
  3169  05C4  30FF               	movlw	255
  3170  05C5  06FD               	xorwf	___ftadd@f2+2,f
  3171  05C6  3001               	movlw	1
  3172  05C7  07FB               	addwf	___ftadd@f2,f
  3173  05C8  3000               	movlw	0
  3174  05C9  1803               	skipnc
  3175  05CA  3001               	movlw	1
  3176  05CB  07FC               	addwf	___ftadd@f2+1,f
  3177  05CC  3000               	movlw	0
  3178  05CD  1803               	skipnc
  3179  05CE  3001               	movlw	1
  3180  05CF  07FD               	addwf	___ftadd@f2+2,f
  3181  05D0  01A4               	clrf	___ftadd@sign
  3182  05D1  0AA4               	incf	___ftadd@sign,f
  3183  05D2                     l1423:	
  3184  05D2  087B               	movf	___ftadd@f2,w
  3185  05D3  00F0               	movwf	___ftpack@arg
  3186  05D4  087C               	movf	___ftadd@f2+1,w
  3187  05D5  00F1               	movwf	___ftpack@arg+1
  3188  05D6  087D               	movf	___ftadd@f2+2,w
  3189  05D7  00F2               	movwf	___ftpack@arg+2
  3190  05D8  0826               	movf	___ftadd@exp1,w
  3191  05D9  00A0               	movwf	??___ftadd
  3192  05DA  0820               	movf	??___ftadd,w
  3193  05DB  00F3               	movwf	___ftpack@exp
  3194  05DC  0824               	movf	___ftadd@sign,w
  3195  05DD  00A1               	movwf	??___ftadd+1
  3196  05DE  0821               	movf	??___ftadd+1,w
  3197  05DF  00F4               	movwf	___ftpack@sign
  3198  05E0  118A  2108         	fcall	___ftpack
  3199  05E2  0870               	movf	?___ftpack,w
  3200  05E3  00F8               	movwf	?___ftadd
  3201  05E4  0871               	movf	?___ftpack+1,w
  3202  05E5  00F9               	movwf	?___ftadd+1
  3203  05E6  0872               	movf	?___ftpack+2,w
  3204  05E7  00FA               	movwf	?___ftadd+2
  3205  05E8  0008               	return
  3206  05E9                     __end_of___ftadd:	
  3207                           
  3208                           	psect	text15
  3209  0E0A                     __ptext15:	
  3210 ;; *************** function ___ftneg *****************
  3211 ;; Defined at:
  3212 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  f1              3    0[COMMON] float 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;		None
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  3    0[COMMON] float 
  3219 ;; Registers used:
  3220 ;;		wreg
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3226 ;;      Params:         3       0       0       0       0
  3227 ;;      Locals:         0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0
  3229 ;;      Totals:         3       0       0       0       0
  3230 ;;Total ram usage:        3 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;;		_ftoa
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           
  3241                           ;psect for function ___ftneg
  3242  0E0A                     ___ftneg:	
  3243                           
  3244                           ;incstack = 0
  3245                           ; Regs used in ___ftneg: [wreg]
  3246  0E0A  0872               	movf	___ftneg@f1+2,w
  3247  0E0B  0471               	iorwf	___ftneg@f1+1,w
  3248  0E0C  0470               	iorwf	___ftneg@f1,w
  3249  0E0D  1903               	skipnz
  3250  0E0E  0008               	return
  3251  0E0F  3080               	movlw	128
  3252  0E10  06F2               	xorwf	___ftneg@f1+2,f
  3253  0E11  0008               	return
  3254  0E12                     __end_of___ftneg:	
  3255                           
  3256                           	psect	text16
  3257  0411                     __ptext16:	
  3258 ;; *************** function ___ftmul *****************
  3259 ;; Defined at:
  3260 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  f1              3    0[BANK0 ] float 
  3263 ;;  f2              3    3[BANK0 ] float 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  3266 ;;  sign            1   15[BANK0 ] unsigned char 
  3267 ;;  cntr            1   14[BANK0 ] unsigned char 
  3268 ;;  exp             1   10[BANK0 ] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  3    0[BANK0 ] float 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0, pclath, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3278 ;;      Params:         0       6       0       0       0
  3279 ;;      Locals:         0       6       0       0       0
  3280 ;;      Temps:          0       4       0       0       0
  3281 ;;      Totals:         0      16       0       0       0
  3282 ;;Total ram usage:       16 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    1
  3285 ;; This function calls:
  3286 ;;		___ftpack
  3287 ;; This function is called by:
  3288 ;;		_main
  3289 ;;		_ftoa
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           
  3294                           ;psect for function ___ftmul
  3295  0411                     ___ftmul:	
  3296                           
  3297                           ;incstack = 0
  3298                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3299  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3300  0412  1303               	bcf	3,6	;RP1=0, select bank0
  3301  0413  0820               	movf	___ftmul@f1,w
  3302  0414  00A6               	movwf	??___ftmul
  3303  0415  0821               	movf	___ftmul@f1+1,w
  3304  0416  00A7               	movwf	??___ftmul+1
  3305  0417  0822               	movf	___ftmul@f1+2,w
  3306  0418  00A8               	movwf	??___ftmul+2
  3307  0419  1003               	clrc
  3308  041A  0D27               	rlf	??___ftmul+1,w
  3309  041B  0D28               	rlf	??___ftmul+2,w
  3310  041C  00A9               	movwf	??___ftmul+3
  3311  041D  0829               	movf	??___ftmul+3,w
  3312  041E  00AA               	movwf	___ftmul@exp
  3313  041F  08AA               	movf	___ftmul@exp,f
  3314  0420  1D03               	skipz
  3315  0421  2C29               	goto	l1631
  3316  0422  3000               	movlw	0
  3317  0423  00A0               	movwf	?___ftmul
  3318  0424  3000               	movlw	0
  3319  0425  00A1               	movwf	?___ftmul+1
  3320  0426  3000               	movlw	0
  3321  0427  00A2               	movwf	?___ftmul+2
  3322  0428  0008               	return
  3323  0429                     l1631:	
  3324  0429  0823               	movf	___ftmul@f2,w
  3325  042A  00A6               	movwf	??___ftmul
  3326  042B  0824               	movf	___ftmul@f2+1,w
  3327  042C  00A7               	movwf	??___ftmul+1
  3328  042D  0825               	movf	___ftmul@f2+2,w
  3329  042E  00A8               	movwf	??___ftmul+2
  3330  042F  1003               	clrc
  3331  0430  0D27               	rlf	??___ftmul+1,w
  3332  0431  0D28               	rlf	??___ftmul+2,w
  3333  0432  00A9               	movwf	??___ftmul+3
  3334  0433  0829               	movf	??___ftmul+3,w
  3335  0434  00AF               	movwf	___ftmul@sign
  3336  0435  08AF               	movf	___ftmul@sign,f
  3337  0436  1D03               	skipz
  3338  0437  2C3F               	goto	l1637
  3339  0438  3000               	movlw	0
  3340  0439  00A0               	movwf	?___ftmul
  3341  043A  3000               	movlw	0
  3342  043B  00A1               	movwf	?___ftmul+1
  3343  043C  3000               	movlw	0
  3344  043D  00A2               	movwf	?___ftmul+2
  3345  043E  0008               	return
  3346  043F                     l1637:	
  3347  043F  082F               	movf	___ftmul@sign,w
  3348  0440  3E7B               	addlw	123
  3349  0441  00A6               	movwf	??___ftmul
  3350  0442  0826               	movf	??___ftmul,w
  3351  0443  07AA               	addwf	___ftmul@exp,f
  3352  0444  0820               	movf	___ftmul@f1,w
  3353  0445  00A6               	movwf	??___ftmul
  3354  0446  0821               	movf	___ftmul@f1+1,w
  3355  0447  00A7               	movwf	??___ftmul+1
  3356  0448  0822               	movf	___ftmul@f1+2,w
  3357  0449  00A8               	movwf	??___ftmul+2
  3358  044A  3010               	movlw	16
  3359  044B                     u2155:	
  3360  044B  1003               	clrc
  3361  044C  0CA8               	rrf	??___ftmul+2,f
  3362  044D  0CA7               	rrf	??___ftmul+1,f
  3363  044E  0CA6               	rrf	??___ftmul,f
  3364  044F  3EFF               	addlw	-1
  3365  0450  1D03               	skipz
  3366  0451  2C4B               	goto	u2155
  3367  0452  0826               	movf	??___ftmul,w
  3368  0453  00A9               	movwf	??___ftmul+3
  3369  0454  0829               	movf	??___ftmul+3,w
  3370  0455  00AF               	movwf	___ftmul@sign
  3371  0456  0823               	movf	___ftmul@f2,w
  3372  0457  00A6               	movwf	??___ftmul
  3373  0458  0824               	movf	___ftmul@f2+1,w
  3374  0459  00A7               	movwf	??___ftmul+1
  3375  045A  0825               	movf	___ftmul@f2+2,w
  3376  045B  00A8               	movwf	??___ftmul+2
  3377  045C  3010               	movlw	16
  3378  045D                     u2165:	
  3379  045D  1003               	clrc
  3380  045E  0CA8               	rrf	??___ftmul+2,f
  3381  045F  0CA7               	rrf	??___ftmul+1,f
  3382  0460  0CA6               	rrf	??___ftmul,f
  3383  0461  3EFF               	addlw	-1
  3384  0462  1D03               	skipz
  3385  0463  2C5D               	goto	u2165
  3386  0464  0826               	movf	??___ftmul,w
  3387  0465  00A9               	movwf	??___ftmul+3
  3388  0466  0829               	movf	??___ftmul+3,w
  3389  0467  06AF               	xorwf	___ftmul@sign,f
  3390  0468  3080               	movlw	128
  3391  0469  00A6               	movwf	??___ftmul
  3392  046A  0826               	movf	??___ftmul,w
  3393  046B  05AF               	andwf	___ftmul@sign,f
  3394  046C  17A1               	bsf	___ftmul@f1+1,7
  3395  046D  17A4               	bsf	___ftmul@f2+1,7
  3396  046E  30FF               	movlw	255
  3397  046F  05A3               	andwf	___ftmul@f2,f
  3398  0470  30FF               	movlw	255
  3399  0471  05A4               	andwf	___ftmul@f2+1,f
  3400  0472  3000               	movlw	0
  3401  0473  05A5               	andwf	___ftmul@f2+2,f
  3402  0474  3000               	movlw	0
  3403  0475  00AB               	movwf	___ftmul@f3_as_product
  3404  0476  3000               	movlw	0
  3405  0477  00AC               	movwf	___ftmul@f3_as_product+1
  3406  0478  3000               	movlw	0
  3407  0479  00AD               	movwf	___ftmul@f3_as_product+2
  3408  047A  3007               	movlw	7
  3409  047B  00A6               	movwf	??___ftmul
  3410  047C  0826               	movf	??___ftmul,w
  3411  047D  00AE               	movwf	___ftmul@cntr
  3412  047E                     l1649:	
  3413  047E  1C20               	btfss	___ftmul@f1,0
  3414  047F  2C8E               	goto	l1653
  3415  0480  0823               	movf	___ftmul@f2,w
  3416  0481  07AB               	addwf	___ftmul@f3_as_product,f
  3417  0482  0824               	movf	___ftmul@f2+1,w
  3418  0483  1103               	clrz
  3419  0484  1803               	skipnc
  3420  0485  0A24               	incf	___ftmul@f2+1,w
  3421  0486  1D03               	btfss	3,2
  3422  0487  07AC               	addwf	___ftmul@f3_as_product+1,f
  3423  0488  0825               	movf	___ftmul@f2+2,w
  3424  0489  1103               	clrz
  3425  048A  1803               	skipnc
  3426  048B  0A25               	incf	___ftmul@f2+2,w
  3427  048C  1D03               	btfss	3,2
  3428  048D  07AD               	addwf	___ftmul@f3_as_product+2,f
  3429  048E                     l1653:	
  3430  048E  3001               	movlw	1
  3431  048F                     u2195:	
  3432  048F  1003               	clrc
  3433  0490  0CA2               	rrf	___ftmul@f1+2,f
  3434  0491  0CA1               	rrf	___ftmul@f1+1,f
  3435  0492  0CA0               	rrf	___ftmul@f1,f
  3436  0493  3EFF               	addlw	-1
  3437  0494  1D03               	skipz
  3438  0495  2C8F               	goto	u2195
  3439  0496  3001               	movlw	1
  3440  0497                     u2205:	
  3441  0497  1003               	clrc
  3442  0498  0DA3               	rlf	___ftmul@f2,f
  3443  0499  0DA4               	rlf	___ftmul@f2+1,f
  3444  049A  0DA5               	rlf	___ftmul@f2+2,f
  3445  049B  3EFF               	addlw	-1
  3446  049C  1D03               	skipz
  3447  049D  2C97               	goto	u2205
  3448  049E  3001               	movlw	1
  3449  049F  02AE               	subwf	___ftmul@cntr,f
  3450  04A0  1D03               	btfss	3,2
  3451  04A1  2C7E               	goto	l1649
  3452  04A2  3009               	movlw	9
  3453  04A3  00A6               	movwf	??___ftmul
  3454  04A4  0826               	movf	??___ftmul,w
  3455  04A5  00AE               	movwf	___ftmul@cntr
  3456  04A6                     l1661:	
  3457  04A6  1C20               	btfss	___ftmul@f1,0
  3458  04A7  2CB6               	goto	l1665
  3459  04A8  0823               	movf	___ftmul@f2,w
  3460  04A9  07AB               	addwf	___ftmul@f3_as_product,f
  3461  04AA  0824               	movf	___ftmul@f2+1,w
  3462  04AB  1103               	clrz
  3463  04AC  1803               	skipnc
  3464  04AD  0A24               	incf	___ftmul@f2+1,w
  3465  04AE  1D03               	btfss	3,2
  3466  04AF  07AC               	addwf	___ftmul@f3_as_product+1,f
  3467  04B0  0825               	movf	___ftmul@f2+2,w
  3468  04B1  1103               	clrz
  3469  04B2  1803               	skipnc
  3470  04B3  0A25               	incf	___ftmul@f2+2,w
  3471  04B4  1D03               	btfss	3,2
  3472  04B5  07AD               	addwf	___ftmul@f3_as_product+2,f
  3473  04B6                     l1665:	
  3474  04B6  3001               	movlw	1
  3475  04B7                     u2245:	
  3476  04B7  1003               	clrc
  3477  04B8  0CA2               	rrf	___ftmul@f1+2,f
  3478  04B9  0CA1               	rrf	___ftmul@f1+1,f
  3479  04BA  0CA0               	rrf	___ftmul@f1,f
  3480  04BB  3EFF               	addlw	-1
  3481  04BC  1D03               	skipz
  3482  04BD  2CB7               	goto	u2245
  3483  04BE  3001               	movlw	1
  3484  04BF                     u2255:	
  3485  04BF  1003               	clrc
  3486  04C0  0CAD               	rrf	___ftmul@f3_as_product+2,f
  3487  04C1  0CAC               	rrf	___ftmul@f3_as_product+1,f
  3488  04C2  0CAB               	rrf	___ftmul@f3_as_product,f
  3489  04C3  3EFF               	addlw	-1
  3490  04C4  1D03               	skipz
  3491  04C5  2CBF               	goto	u2255
  3492  04C6  3001               	movlw	1
  3493  04C7  02AE               	subwf	___ftmul@cntr,f
  3494  04C8  1D03               	btfss	3,2
  3495  04C9  2CA6               	goto	l1661
  3496  04CA  082B               	movf	___ftmul@f3_as_product,w
  3497  04CB  00F0               	movwf	___ftpack@arg
  3498  04CC  082C               	movf	___ftmul@f3_as_product+1,w
  3499  04CD  00F1               	movwf	___ftpack@arg+1
  3500  04CE  082D               	movf	___ftmul@f3_as_product+2,w
  3501  04CF  00F2               	movwf	___ftpack@arg+2
  3502  04D0  082A               	movf	___ftmul@exp,w
  3503  04D1  00A6               	movwf	??___ftmul
  3504  04D2  0826               	movf	??___ftmul,w
  3505  04D3  00F3               	movwf	___ftpack@exp
  3506  04D4  082F               	movf	___ftmul@sign,w
  3507  04D5  00A7               	movwf	??___ftmul+1
  3508  04D6  0827               	movf	??___ftmul+1,w
  3509  04D7  00F4               	movwf	___ftpack@sign
  3510  04D8  118A  2108         	fcall	___ftpack
  3511  04DA  0870               	movf	?___ftpack,w
  3512  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3513  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  3514  04DD  00A0               	movwf	?___ftmul
  3515  04DE  0871               	movf	?___ftpack+1,w
  3516  04DF  00A1               	movwf	?___ftmul+1
  3517  04E0  0872               	movf	?___ftpack+2,w
  3518  04E1  00A2               	movwf	?___ftmul+2
  3519  04E2  0008               	return
  3520  04E3                     __end_of___ftmul:	
  3521                           
  3522                           	psect	text17
  3523  004D                     __ptext17:	
  3524 ;; *************** function ___ftge *****************
  3525 ;; Defined at:
  3526 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  ff1             3    0[COMMON] float 
  3529 ;;  ff2             3    3[COMMON] float 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;		None               void
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3541 ;;      Params:         6       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0
  3543 ;;      Temps:          6       0       0       0       0
  3544 ;;      Totals:        12       0       0       0       0
  3545 ;;Total ram usage:       12 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; This function calls:
  3548 ;;		Nothing
  3549 ;; This function is called by:
  3550 ;;		_ftoa
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           
  3555                           ;psect for function ___ftge
  3556  004D                     ___ftge:	
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3560  004D  1FF2               	btfss	___ftge@ff1+2,7
  3561  004E  2874               	goto	l1609
  3562  004F  3000               	movlw	0
  3563  0050  00F6               	movwf	??___ftge
  3564  0051  3000               	movlw	0
  3565  0052  00F7               	movwf	??___ftge+1
  3566  0053  3080               	movlw	128
  3567  0054  00F8               	movwf	??___ftge+2
  3568  0055  0970               	comf	___ftge@ff1,w
  3569  0056  00F9               	movwf	??___ftge+3
  3570  0057  0971               	comf	___ftge@ff1+1,w
  3571  0058  00FA               	movwf	??___ftge+4
  3572  0059  0972               	comf	___ftge@ff1+2,w
  3573  005A  00FB               	movwf	??___ftge+5
  3574  005B  0AF9               	incf	??___ftge+3,f
  3575  005C  1903               	skipnz
  3576  005D  0AFA               	incf	??___ftge+4,f
  3577  005E  1903               	skipnz
  3578  005F  0AFB               	incf	??___ftge+5,f
  3579  0060  0879               	movf	??___ftge+3,w
  3580  0061  07F6               	addwf	??___ftge,f
  3581  0062  087A               	movf	??___ftge+4,w
  3582  0063  1803               	skipnc
  3583  0064  0F7A               	incfsz	??___ftge+4,w
  3584  0065  2867               	goto	u2091
  3585  0066  2868               	goto	u2092
  3586  0067                     u2091:	
  3587  0067  07F7               	addwf	??___ftge+1,f
  3588  0068                     u2092:	
  3589  0068  087B               	movf	??___ftge+5,w
  3590  0069  1803               	skipnc
  3591  006A  0F7B               	incfsz	??___ftge+5,w
  3592  006B  286D               	goto	u2093
  3593  006C  286E               	goto	u2094
  3594  006D                     u2093:	
  3595  006D  07F8               	addwf	??___ftge+2,f
  3596  006E                     u2094:	
  3597  006E  0876               	movf	??___ftge,w
  3598  006F  00F0               	movwf	___ftge@ff1
  3599  0070  0877               	movf	??___ftge+1,w
  3600  0071  00F1               	movwf	___ftge@ff1+1
  3601  0072  0878               	movf	??___ftge+2,w
  3602  0073  00F2               	movwf	___ftge@ff1+2
  3603  0074                     l1609:	
  3604  0074  1FF5               	btfss	___ftge@ff2+2,7
  3605  0075  289B               	goto	l1613
  3606  0076  3000               	movlw	0
  3607  0077  00F6               	movwf	??___ftge
  3608  0078  3000               	movlw	0
  3609  0079  00F7               	movwf	??___ftge+1
  3610  007A  3080               	movlw	128
  3611  007B  00F8               	movwf	??___ftge+2
  3612  007C  0973               	comf	___ftge@ff2,w
  3613  007D  00F9               	movwf	??___ftge+3
  3614  007E  0974               	comf	___ftge@ff2+1,w
  3615  007F  00FA               	movwf	??___ftge+4
  3616  0080  0975               	comf	___ftge@ff2+2,w
  3617  0081  00FB               	movwf	??___ftge+5
  3618  0082  0AF9               	incf	??___ftge+3,f
  3619  0083  1903               	skipnz
  3620  0084  0AFA               	incf	??___ftge+4,f
  3621  0085  1903               	skipnz
  3622  0086  0AFB               	incf	??___ftge+5,f
  3623  0087  0879               	movf	??___ftge+3,w
  3624  0088  07F6               	addwf	??___ftge,f
  3625  0089  087A               	movf	??___ftge+4,w
  3626  008A  1803               	skipnc
  3627  008B  0F7A               	incfsz	??___ftge+4,w
  3628  008C  288E               	goto	u2111
  3629  008D  288F               	goto	u2112
  3630  008E                     u2111:	
  3631  008E  07F7               	addwf	??___ftge+1,f
  3632  008F                     u2112:	
  3633  008F  087B               	movf	??___ftge+5,w
  3634  0090  1803               	skipnc
  3635  0091  0F7B               	incfsz	??___ftge+5,w
  3636  0092  2894               	goto	u2113
  3637  0093  2895               	goto	u2114
  3638  0094                     u2113:	
  3639  0094  07F8               	addwf	??___ftge+2,f
  3640  0095                     u2114:	
  3641  0095  0876               	movf	??___ftge,w
  3642  0096  00F3               	movwf	___ftge@ff2
  3643  0097  0877               	movf	??___ftge+1,w
  3644  0098  00F4               	movwf	___ftge@ff2+1
  3645  0099  0878               	movf	??___ftge+2,w
  3646  009A  00F5               	movwf	___ftge@ff2+2
  3647  009B                     l1613:	
  3648  009B  3080               	movlw	128
  3649  009C  06F2               	xorwf	___ftge@ff1+2,f
  3650  009D  3080               	movlw	128
  3651  009E  06F5               	xorwf	___ftge@ff2+2,f
  3652  009F  0875               	movf	___ftge@ff2+2,w
  3653  00A0  0272               	subwf	___ftge@ff1+2,w
  3654  00A1  1D03               	skipz
  3655  00A2  0008               	return
  3656  00A3  0874               	movf	___ftge@ff2+1,w
  3657  00A4  0271               	subwf	___ftge@ff1+1,w
  3658  00A5  1D03               	skipz
  3659  00A6  0008               	return
  3660  00A7  0873               	movf	___ftge@ff2,w
  3661  00A8  0270               	subwf	___ftge@ff1,w
  3662  00A9  0008               	return
  3663  00AA                     __end_of___ftge:	
  3664                           
  3665                           	psect	text18
  3666  035A                     __ptext18:	
  3667 ;; *************** function ___ftdiv *****************
  3668 ;; Defined at:
  3669 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  f2              3    7[BANK0 ] float 
  3672 ;;  f1              3   10[BANK0 ] float 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  f3              3   18[BANK0 ] float 
  3675 ;;  sign            1   22[BANK0 ] unsigned char 
  3676 ;;  exp             1   21[BANK0 ] unsigned char 
  3677 ;;  cntr            1   17[BANK0 ] unsigned char 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  3    7[BANK0 ] float 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0, pclath, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3687 ;;      Params:         0       6       0       0       0
  3688 ;;      Locals:         0       6       0       0       0
  3689 ;;      Temps:          0       4       0       0       0
  3690 ;;      Totals:         0      16       0       0       0
  3691 ;;Total ram usage:       16 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    1
  3694 ;; This function calls:
  3695 ;;		___ftpack
  3696 ;; This function is called by:
  3697 ;;		_main
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           
  3702                           ;psect for function ___ftdiv
  3703  035A                     ___ftdiv:	
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3707  035A  1283               	bcf	3,5	;RP0=0, select bank0
  3708  035B  1303               	bcf	3,6	;RP1=0, select bank0
  3709  035C  082A               	movf	___ftdiv@f1,w
  3710  035D  00AD               	movwf	??___ftdiv
  3711  035E  082B               	movf	___ftdiv@f1+1,w
  3712  035F  00AE               	movwf	??___ftdiv+1
  3713  0360  082C               	movf	___ftdiv@f1+2,w
  3714  0361  00AF               	movwf	??___ftdiv+2
  3715  0362  1003               	clrc
  3716  0363  0D2E               	rlf	??___ftdiv+1,w
  3717  0364  0D2F               	rlf	??___ftdiv+2,w
  3718  0365  00B0               	movwf	??___ftdiv+3
  3719  0366  0830               	movf	??___ftdiv+3,w
  3720  0367  00B5               	movwf	___ftdiv@exp
  3721  0368  08B5               	movf	___ftdiv@exp,f
  3722  0369  1D03               	skipz
  3723  036A  2B72               	goto	l1863
  3724  036B  3000               	movlw	0
  3725  036C  00A7               	movwf	?___ftdiv
  3726  036D  3000               	movlw	0
  3727  036E  00A8               	movwf	?___ftdiv+1
  3728  036F  3000               	movlw	0
  3729  0370  00A9               	movwf	?___ftdiv+2
  3730  0371  0008               	return
  3731  0372                     l1863:	
  3732  0372  0827               	movf	___ftdiv@f2,w
  3733  0373  00AD               	movwf	??___ftdiv
  3734  0374  0828               	movf	___ftdiv@f2+1,w
  3735  0375  00AE               	movwf	??___ftdiv+1
  3736  0376  0829               	movf	___ftdiv@f2+2,w
  3737  0377  00AF               	movwf	??___ftdiv+2
  3738  0378  1003               	clrc
  3739  0379  0D2E               	rlf	??___ftdiv+1,w
  3740  037A  0D2F               	rlf	??___ftdiv+2,w
  3741  037B  00B0               	movwf	??___ftdiv+3
  3742  037C  0830               	movf	??___ftdiv+3,w
  3743  037D  00B6               	movwf	___ftdiv@sign
  3744  037E  08B6               	movf	___ftdiv@sign,f
  3745  037F  1D03               	skipz
  3746  0380  2B88               	goto	l1869
  3747  0381  3000               	movlw	0
  3748  0382  00A7               	movwf	?___ftdiv
  3749  0383  3000               	movlw	0
  3750  0384  00A8               	movwf	?___ftdiv+1
  3751  0385  3000               	movlw	0
  3752  0386  00A9               	movwf	?___ftdiv+2
  3753  0387  0008               	return
  3754  0388                     l1869:	
  3755  0388  3000               	movlw	0
  3756  0389  00B2               	movwf	___ftdiv@f3
  3757  038A  3000               	movlw	0
  3758  038B  00B3               	movwf	___ftdiv@f3+1
  3759  038C  3000               	movlw	0
  3760  038D  00B4               	movwf	___ftdiv@f3+2
  3761  038E  3089               	movlw	137
  3762  038F  0736               	addwf	___ftdiv@sign,w
  3763  0390  00AD               	movwf	??___ftdiv
  3764  0391  082D               	movf	??___ftdiv,w
  3765  0392  02B5               	subwf	___ftdiv@exp,f
  3766  0393  082A               	movf	___ftdiv@f1,w
  3767  0394  00AD               	movwf	??___ftdiv
  3768  0395  082B               	movf	___ftdiv@f1+1,w
  3769  0396  00AE               	movwf	??___ftdiv+1
  3770  0397  082C               	movf	___ftdiv@f1+2,w
  3771  0398  00AF               	movwf	??___ftdiv+2
  3772  0399  3010               	movlw	16
  3773  039A                     u2505:	
  3774  039A  1003               	clrc
  3775  039B  0CAF               	rrf	??___ftdiv+2,f
  3776  039C  0CAE               	rrf	??___ftdiv+1,f
  3777  039D  0CAD               	rrf	??___ftdiv,f
  3778  039E  3EFF               	addlw	-1
  3779  039F  1D03               	skipz
  3780  03A0  2B9A               	goto	u2505
  3781  03A1  082D               	movf	??___ftdiv,w
  3782  03A2  00B0               	movwf	??___ftdiv+3
  3783  03A3  0830               	movf	??___ftdiv+3,w
  3784  03A4  00B6               	movwf	___ftdiv@sign
  3785  03A5  0827               	movf	___ftdiv@f2,w
  3786  03A6  00AD               	movwf	??___ftdiv
  3787  03A7  0828               	movf	___ftdiv@f2+1,w
  3788  03A8  00AE               	movwf	??___ftdiv+1
  3789  03A9  0829               	movf	___ftdiv@f2+2,w
  3790  03AA  00AF               	movwf	??___ftdiv+2
  3791  03AB  3010               	movlw	16
  3792  03AC                     u2515:	
  3793  03AC  1003               	clrc
  3794  03AD  0CAF               	rrf	??___ftdiv+2,f
  3795  03AE  0CAE               	rrf	??___ftdiv+1,f
  3796  03AF  0CAD               	rrf	??___ftdiv,f
  3797  03B0  3EFF               	addlw	-1
  3798  03B1  1D03               	skipz
  3799  03B2  2BAC               	goto	u2515
  3800  03B3  082D               	movf	??___ftdiv,w
  3801  03B4  00B0               	movwf	??___ftdiv+3
  3802  03B5  0830               	movf	??___ftdiv+3,w
  3803  03B6  06B6               	xorwf	___ftdiv@sign,f
  3804  03B7  3080               	movlw	128
  3805  03B8  00AD               	movwf	??___ftdiv
  3806  03B9  082D               	movf	??___ftdiv,w
  3807  03BA  05B6               	andwf	___ftdiv@sign,f
  3808  03BB  17AB               	bsf	___ftdiv@f1+1,7
  3809  03BC  30FF               	movlw	255
  3810  03BD  05AA               	andwf	___ftdiv@f1,f
  3811  03BE  30FF               	movlw	255
  3812  03BF  05AB               	andwf	___ftdiv@f1+1,f
  3813  03C0  3000               	movlw	0
  3814  03C1  05AC               	andwf	___ftdiv@f1+2,f
  3815  03C2  17A8               	bsf	___ftdiv@f2+1,7
  3816  03C3  30FF               	movlw	255
  3817  03C4  05A7               	andwf	___ftdiv@f2,f
  3818  03C5  30FF               	movlw	255
  3819  03C6  05A8               	andwf	___ftdiv@f2+1,f
  3820  03C7  3000               	movlw	0
  3821  03C8  05A9               	andwf	___ftdiv@f2+2,f
  3822  03C9  3018               	movlw	24
  3823  03CA  00AD               	movwf	??___ftdiv
  3824  03CB  082D               	movf	??___ftdiv,w
  3825  03CC  00B1               	movwf	___ftdiv@cntr
  3826  03CD                     l1883:	
  3827  03CD  3001               	movlw	1
  3828  03CE                     u2525:	
  3829  03CE  1003               	clrc
  3830  03CF  0DB2               	rlf	___ftdiv@f3,f
  3831  03D0  0DB3               	rlf	___ftdiv@f3+1,f
  3832  03D1  0DB4               	rlf	___ftdiv@f3+2,f
  3833  03D2  3EFF               	addlw	-1
  3834  03D3  1D03               	skipz
  3835  03D4  2BCE               	goto	u2525
  3836  03D5  0829               	movf	___ftdiv@f2+2,w
  3837  03D6  022C               	subwf	___ftdiv@f1+2,w
  3838  03D7  1D03               	skipz
  3839  03D8  2BDF               	goto	u2535
  3840  03D9  0828               	movf	___ftdiv@f2+1,w
  3841  03DA  022B               	subwf	___ftdiv@f1+1,w
  3842  03DB  1D03               	skipz
  3843  03DC  2BDF               	goto	u2535
  3844  03DD  0827               	movf	___ftdiv@f2,w
  3845  03DE  022A               	subwf	___ftdiv@f1,w
  3846  03DF                     u2535:	
  3847  03DF  1C03               	skipc
  3848  03E0  2BEC               	goto	l1891
  3849  03E1  0827               	movf	___ftdiv@f2,w
  3850  03E2  02AA               	subwf	___ftdiv@f1,f
  3851  03E3  0828               	movf	___ftdiv@f2+1,w
  3852  03E4  1C03               	skipc
  3853  03E5  0F28               	incfsz	___ftdiv@f2+1,w
  3854  03E6  02AB               	subwf	___ftdiv@f1+1,f
  3855  03E7  0829               	movf	___ftdiv@f2+2,w
  3856  03E8  1C03               	skipc
  3857  03E9  0A29               	incf	___ftdiv@f2+2,w
  3858  03EA  02AC               	subwf	___ftdiv@f1+2,f
  3859  03EB  1432               	bsf	___ftdiv@f3,0
  3860  03EC                     l1891:	
  3861  03EC  3001               	movlw	1
  3862  03ED                     u2545:	
  3863  03ED  1003               	clrc
  3864  03EE  0DAA               	rlf	___ftdiv@f1,f
  3865  03EF  0DAB               	rlf	___ftdiv@f1+1,f
  3866  03F0  0DAC               	rlf	___ftdiv@f1+2,f
  3867  03F1  3EFF               	addlw	-1
  3868  03F2  1D03               	skipz
  3869  03F3  2BED               	goto	u2545
  3870  03F4  3001               	movlw	1
  3871  03F5  02B1               	subwf	___ftdiv@cntr,f
  3872  03F6  1D03               	btfss	3,2
  3873  03F7  2BCD               	goto	l1883
  3874  03F8  0832               	movf	___ftdiv@f3,w
  3875  03F9  00F0               	movwf	___ftpack@arg
  3876  03FA  0833               	movf	___ftdiv@f3+1,w
  3877  03FB  00F1               	movwf	___ftpack@arg+1
  3878  03FC  0834               	movf	___ftdiv@f3+2,w
  3879  03FD  00F2               	movwf	___ftpack@arg+2
  3880  03FE  0835               	movf	___ftdiv@exp,w
  3881  03FF  00AD               	movwf	??___ftdiv
  3882  0400  082D               	movf	??___ftdiv,w
  3883  0401  00F3               	movwf	___ftpack@exp
  3884  0402  0836               	movf	___ftdiv@sign,w
  3885  0403  00AE               	movwf	??___ftdiv+1
  3886  0404  082E               	movf	??___ftdiv+1,w
  3887  0405  00F4               	movwf	___ftpack@sign
  3888  0406  118A  2108         	fcall	___ftpack
  3889  0408  0870               	movf	?___ftpack,w
  3890  0409  1283               	bcf	3,5	;RP0=0, select bank0
  3891  040A  1303               	bcf	3,6	;RP1=0, select bank0
  3892  040B  00A7               	movwf	?___ftdiv
  3893  040C  0871               	movf	?___ftpack+1,w
  3894  040D  00A8               	movwf	?___ftdiv+1
  3895  040E  0872               	movf	?___ftpack+2,w
  3896  040F  00A9               	movwf	?___ftdiv+2
  3897  0410  0008               	return
  3898  0411                     __end_of___ftdiv:	
  3899                           
  3900                           	psect	text19
  3901  0ECD                     __ptext19:	
  3902 ;; *************** function ___awtoft *****************
  3903 ;; Defined at:
  3904 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;  c               2    8[COMMON] int 
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  sign            1   13[COMMON] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  3    8[COMMON] float 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3918 ;;      Params:         3       0       0       0       0
  3919 ;;      Locals:         1       0       0       0       0
  3920 ;;      Temps:          2       0       0       0       0
  3921 ;;      Totals:         6       0       0       0       0
  3922 ;;Total ram usage:        6 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    1
  3925 ;; This function calls:
  3926 ;;		___ftpack
  3927 ;; This function is called by:
  3928 ;;		_main
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function ___awtoft
  3934  0ECD                     ___awtoft:	
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3938  0ECD  01FD               	clrf	___awtoft@sign
  3939  0ECE  1FF9               	btfss	___awtoft@c+1,7
  3940  0ECF  2ED7               	goto	l1853
  3941  0ED0  09F8               	comf	___awtoft@c,f
  3942  0ED1  09F9               	comf	___awtoft@c+1,f
  3943  0ED2  0AF8               	incf	___awtoft@c,f
  3944  0ED3  1903               	skipnz
  3945  0ED4  0AF9               	incf	___awtoft@c+1,f
  3946  0ED5  01FD               	clrf	___awtoft@sign
  3947  0ED6  0AFD               	incf	___awtoft@sign,f
  3948  0ED7                     l1853:	
  3949  0ED7  0878               	movf	___awtoft@c,w
  3950  0ED8  00F0               	movwf	___ftpack@arg
  3951  0ED9  0879               	movf	___awtoft@c+1,w
  3952  0EDA  00F1               	movwf	___ftpack@arg+1
  3953  0EDB  01F2               	clrf	___ftpack@arg+2
  3954  0EDC  308E               	movlw	142
  3955  0EDD  00FB               	movwf	??___awtoft
  3956  0EDE  087B               	movf	??___awtoft,w
  3957  0EDF  00F3               	movwf	___ftpack@exp
  3958  0EE0  087D               	movf	___awtoft@sign,w
  3959  0EE1  00FC               	movwf	??___awtoft+1
  3960  0EE2  087C               	movf	??___awtoft+1,w
  3961  0EE3  00F4               	movwf	___ftpack@sign
  3962  0EE4  118A  2108         	fcall	___ftpack
  3963  0EE6  0870               	movf	?___ftpack,w
  3964  0EE7  00F8               	movwf	?___awtoft
  3965  0EE8  0871               	movf	?___ftpack+1,w
  3966  0EE9  00F9               	movwf	?___awtoft+1
  3967  0EEA  0872               	movf	?___ftpack+2,w
  3968  0EEB  00FA               	movwf	?___awtoft+2
  3969  0EEC  0008               	return
  3970  0EED                     __end_of___awtoft:	
  3971                           
  3972                           	psect	text20
  3973  0108                     __ptext20:	
  3974 ;; *************** function ___ftpack *****************
  3975 ;; Defined at:
  3976 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  arg             3    0[COMMON] unsigned um
  3979 ;;  exp             1    3[COMMON] unsigned char 
  3980 ;;  sign            1    4[COMMON] unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  3    0[COMMON] float 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3992 ;;      Params:         5       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0
  3994 ;;      Temps:          3       0       0       0       0
  3995 ;;      Totals:         8       0       0       0       0
  3996 ;;Total ram usage:        8 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		___awtoft
  4002 ;;		___ftadd
  4003 ;;		___ftdiv
  4004 ;;		___ftmul
  4005 ;;		___lltoft
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function ___ftpack
  4011  0108                     ___ftpack:	
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4015  0108  0873               	movf	___ftpack@exp,w
  4016  0109  1903               	btfsc	3,2
  4017  010A  2910               	goto	l1295
  4018  010B  0872               	movf	___ftpack@arg+2,w
  4019  010C  0471               	iorwf	___ftpack@arg+1,w
  4020  010D  0470               	iorwf	___ftpack@arg,w
  4021  010E  1D03               	skipz
  4022  010F  2923               	goto	l1301
  4023  0110                     l1295:	
  4024  0110  3000               	movlw	0
  4025  0111  00F0               	movwf	?___ftpack
  4026  0112  3000               	movlw	0
  4027  0113  00F1               	movwf	?___ftpack+1
  4028  0114  3000               	movlw	0
  4029  0115  00F2               	movwf	?___ftpack+2
  4030  0116  0008               	return
  4031  0117                     l1299:	
  4032  0117  3001               	movlw	1
  4033  0118  00F5               	movwf	??___ftpack
  4034  0119  0875               	movf	??___ftpack,w
  4035  011A  07F3               	addwf	___ftpack@exp,f
  4036  011B  3001               	movlw	1
  4037  011C                     u1315:	
  4038  011C  1003               	clrc
  4039  011D  0CF2               	rrf	___ftpack@arg+2,f
  4040  011E  0CF1               	rrf	___ftpack@arg+1,f
  4041  011F  0CF0               	rrf	___ftpack@arg,f
  4042  0120  3EFF               	addlw	-1
  4043  0121  1D03               	skipz
  4044  0122  291C               	goto	u1315
  4045  0123                     l1301:	
  4046  0123  30FE               	movlw	254
  4047  0124  0572               	andwf	___ftpack@arg+2,w
  4048  0125  1903               	btfsc	3,2
  4049  0126  293E               	goto	l384
  4050  0127  2917               	goto	l1299
  4051  0128                     l1303:	
  4052  0128  3001               	movlw	1
  4053  0129  00F5               	movwf	??___ftpack
  4054  012A  0875               	movf	??___ftpack,w
  4055  012B  07F3               	addwf	___ftpack@exp,f
  4056  012C  3001               	movlw	1
  4057  012D  07F0               	addwf	___ftpack@arg,f
  4058  012E  3000               	movlw	0
  4059  012F  1803               	skipnc
  4060  0130  3001               	movlw	1
  4061  0131  07F1               	addwf	___ftpack@arg+1,f
  4062  0132  3000               	movlw	0
  4063  0133  1803               	skipnc
  4064  0134  3001               	movlw	1
  4065  0135  07F2               	addwf	___ftpack@arg+2,f
  4066  0136  3001               	movlw	1
  4067  0137                     u1335:	
  4068  0137  1003               	clrc
  4069  0138  0CF2               	rrf	___ftpack@arg+2,f
  4070  0139  0CF1               	rrf	___ftpack@arg+1,f
  4071  013A  0CF0               	rrf	___ftpack@arg,f
  4072  013B  3EFF               	addlw	-1
  4073  013C  1D03               	skipz
  4074  013D  2937               	goto	u1335
  4075  013E                     l384:	
  4076  013E  30FF               	movlw	255
  4077  013F  0572               	andwf	___ftpack@arg+2,w
  4078  0140  1903               	btfsc	3,2
  4079  0141  294D               	goto	l1311
  4080  0142  2928               	goto	l1303
  4081  0143                     l1309:	
  4082  0143  3001               	movlw	1
  4083  0144  02F3               	subwf	___ftpack@exp,f
  4084  0145  3001               	movlw	1
  4085  0146                     u1355:	
  4086  0146  1003               	clrc
  4087  0147  0DF0               	rlf	___ftpack@arg,f
  4088  0148  0DF1               	rlf	___ftpack@arg+1,f
  4089  0149  0DF2               	rlf	___ftpack@arg+2,f
  4090  014A  3EFF               	addlw	-1
  4091  014B  1D03               	skipz
  4092  014C  2946               	goto	u1355
  4093  014D                     l1311:	
  4094  014D  1FF1               	btfss	___ftpack@arg+1,7
  4095  014E  2943               	goto	l1309
  4096  014F  1873               	btfsc	___ftpack@exp,0
  4097  0150  2957               	goto	l390
  4098  0151  30FF               	movlw	255
  4099  0152  05F0               	andwf	___ftpack@arg,f
  4100  0153  307F               	movlw	127
  4101  0154  05F1               	andwf	___ftpack@arg+1,f
  4102  0155  30FF               	movlw	255
  4103  0156  05F2               	andwf	___ftpack@arg+2,f
  4104  0157                     l390:	
  4105  0157  1003               	clrc
  4106  0158  0CF3               	rrf	___ftpack@exp,f
  4107  0159  0873               	movf	___ftpack@exp,w
  4108  015A  00F5               	movwf	??___ftpack
  4109  015B  01F6               	clrf	??___ftpack+1
  4110  015C  01F7               	clrf	??___ftpack+2
  4111  015D  3010               	movlw	16
  4112  015E                     u1385:	
  4113  015E  1003               	clrc
  4114  015F  0DF5               	rlf	??___ftpack,f
  4115  0160  0DF6               	rlf	??___ftpack+1,f
  4116  0161  0DF7               	rlf	??___ftpack+2,f
  4117  0162  3EFF               	addlw	-1
  4118  0163  1D03               	skipz
  4119  0164  295E               	goto	u1385
  4120  0165  0875               	movf	??___ftpack,w
  4121  0166  04F0               	iorwf	___ftpack@arg,f
  4122  0167  0876               	movf	??___ftpack+1,w
  4123  0168  04F1               	iorwf	___ftpack@arg+1,f
  4124  0169  0877               	movf	??___ftpack+2,w
  4125  016A  04F2               	iorwf	___ftpack@arg+2,f
  4126  016B  0874               	movf	___ftpack@sign,w
  4127  016C  1903               	btfsc	3,2
  4128  016D  0008               	return
  4129  016E  17F2               	bsf	___ftpack@arg+2,7
  4130  016F  0008               	return
  4131  0170                     __end_of___ftpack:	
  4132                           
  4133                           	psect	text21
  4134  0EB0                     __ptext21:	
  4135 ;; *************** function _Lcd_Write_String *****************
  4136 ;; Defined at:
  4137 ;;		line 97 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  a               1    wreg     PTR unsigned char 
  4140 ;;		 -> ftoa@buf(17), 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  a               1    8[COMMON] PTR unsigned char 
  4143 ;;		 -> ftoa@buf(17), 
  4144 ;;  i               2    6[COMMON] int 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;		None               void
  4147 ;; Registers used:
  4148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4154 ;;      Params:         0       0       0       0       0
  4155 ;;      Locals:         3       0       0       0       0
  4156 ;;      Temps:          1       0       0       0       0
  4157 ;;      Totals:         4       0       0       0       0
  4158 ;;Total ram usage:        4 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    2
  4161 ;; This function calls:
  4162 ;;		_Lcd_Write_Char
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _Lcd_Write_String
  4170  0EB0                     _Lcd_Write_String:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4174                           ;Lcd_Write_String@a stored from wreg
  4175  0EB0  00F8               	movwf	Lcd_Write_String@a
  4176                           
  4177                           ;LCD.h: 99: int i;
  4178                           ;LCD.h: 100: for(i=0;a[i]!='\0';i++)
  4179  0EB1  01F6               	clrf	Lcd_Write_String@i
  4180  0EB2  01F7               	clrf	Lcd_Write_String@i+1
  4181  0EB3                     l1821:	
  4182  0EB3  0876               	movf	Lcd_Write_String@i,w
  4183  0EB4  0778               	addwf	Lcd_Write_String@a,w
  4184  0EB5  00F5               	movwf	??_Lcd_Write_String
  4185  0EB6  0875               	movf	??_Lcd_Write_String,w
  4186  0EB7  0084               	movwf	4
  4187  0EB8  1383               	bcf	3,7	;select IRP bank0
  4188  0EB9  0880               	movf	0,f
  4189  0EBA  1903               	btfsc	3,2
  4190  0EBB  0008               	return
  4191                           
  4192                           ;LCD.h: 101: Lcd_Write_Char(a[i]);
  4193  0EBC  0876               	movf	Lcd_Write_String@i,w
  4194  0EBD  0778               	addwf	Lcd_Write_String@a,w
  4195  0EBE  00F5               	movwf	??_Lcd_Write_String
  4196  0EBF  0875               	movf	??_Lcd_Write_String,w
  4197  0EC0  0084               	movwf	4
  4198  0EC1  1383               	bcf	3,7	;select IRP bank0
  4199  0EC2  0800               	movf	0,w
  4200  0EC3  158A  273A  158A   	fcall	_Lcd_Write_Char
  4201  0EC6  3001               	movlw	1
  4202  0EC7  07F6               	addwf	Lcd_Write_String@i,f
  4203  0EC8  1803               	skipnc
  4204  0EC9  0AF7               	incf	Lcd_Write_String@i+1,f
  4205  0ECA  3000               	movlw	0
  4206  0ECB  07F7               	addwf	Lcd_Write_String@i+1,f
  4207  0ECC  2EB3               	goto	l1821
  4208  0ECD                     __end_of_Lcd_Write_String:	
  4209                           
  4210                           	psect	text22
  4211  0F3A                     __ptext22:	
  4212 ;; *************** function _Lcd_Write_Char *****************
  4213 ;; Defined at:
  4214 ;;		line 81 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  a               1    wreg     unsigned char 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  a               1    4[COMMON] unsigned char 
  4219 ;;  y               1    3[COMMON] unsigned char 
  4220 ;;  temp            1    2[COMMON] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4230 ;;      Params:         0       0       0       0       0
  4231 ;;      Locals:         3       0       0       0       0
  4232 ;;      Temps:          1       0       0       0       0
  4233 ;;      Totals:         4       0       0       0       0
  4234 ;;Total ram usage:        4 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    1
  4237 ;; This function calls:
  4238 ;;		_Lcd_Port
  4239 ;; This function is called by:
  4240 ;;		_Lcd_Write_String
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _Lcd_Write_Char
  4246  0F3A                     _Lcd_Write_Char:	
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4250                           ;Lcd_Write_Char@a stored from wreg
  4251  0F3A  00F4               	movwf	Lcd_Write_Char@a
  4252                           
  4253                           ;LCD.h: 83: char temp,y;
  4254                           ;LCD.h: 84: temp = a&0x0F;
  4255  0F3B  0874               	movf	Lcd_Write_Char@a,w
  4256  0F3C  390F               	andlw	15
  4257  0F3D  00F1               	movwf	??_Lcd_Write_Char
  4258  0F3E  0871               	movf	??_Lcd_Write_Char,w
  4259  0F3F  00F2               	movwf	Lcd_Write_Char@temp
  4260                           
  4261                           ;LCD.h: 85: y = a&0xF0;
  4262  0F40  0874               	movf	Lcd_Write_Char@a,w
  4263  0F41  39F0               	andlw	240
  4264  0F42  00F1               	movwf	??_Lcd_Write_Char
  4265  0F43  0871               	movf	??_Lcd_Write_Char,w
  4266  0F44  00F3               	movwf	Lcd_Write_Char@y
  4267                           
  4268                           ;LCD.h: 86: PORTBbits.RB6 = 1;
  4269  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  4270  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  4271  0F47  1706               	bsf	6,6	;volatile
  4272                           
  4273                           ;LCD.h: 87: Lcd_Port(y>>4);
  4274  0F48  0873               	movf	Lcd_Write_Char@y,w
  4275  0F49  00F1               	movwf	??_Lcd_Write_Char
  4276  0F4A  3004               	movlw	4
  4277  0F4B                     u1875:	
  4278  0F4B  1003               	clrc
  4279  0F4C  0CF1               	rrf	??_Lcd_Write_Char,f
  4280  0F4D  3EFF               	addlw	-1
  4281  0F4E  1D03               	skipz
  4282  0F4F  2F4B               	goto	u1875
  4283  0F50  0871               	movf	??_Lcd_Write_Char,w
  4284  0F51  158A  2660  158A   	fcall	_Lcd_Port
  4285                           
  4286                           ;LCD.h: 88: PORTBbits.RB7 = 1;
  4287  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  4289  0F56  1786               	bsf	6,7	;volatile
  4290                           
  4291                           ;LCD.h: 89: _delay((unsigned long)((40)*(4000000/4000000.0)));
  4292  0F57  300D               	movlw	13
  4293  0F58  00F1               	movwf	??_Lcd_Write_Char
  4294  0F59                     u2587:	
  4295  0F59  0BF1               	decfsz	??_Lcd_Write_Char,f
  4296  0F5A  2F59               	goto	u2587
  4297                           
  4298                           ;LCD.h: 90: PORTBbits.RB7 = 0;
  4299  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  4300  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  4301  0F5D  1386               	bcf	6,7	;volatile
  4302                           
  4303                           ;LCD.h: 91: Lcd_Port(temp);
  4304  0F5E  0872               	movf	Lcd_Write_Char@temp,w
  4305  0F5F  158A  2660  158A   	fcall	_Lcd_Port
  4306                           
  4307                           ;LCD.h: 92: PORTBbits.RB7 = 1;
  4308  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  4309  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  4310  0F64  1786               	bsf	6,7	;volatile
  4311                           
  4312                           ;LCD.h: 93: _delay((unsigned long)((40)*(4000000/4000000.0)));
  4313  0F65  300D               	movlw	13
  4314  0F66  00F1               	movwf	??_Lcd_Write_Char
  4315  0F67                     u2597:	
  4316  0F67  0BF1               	decfsz	??_Lcd_Write_Char,f
  4317  0F68  2F67               	goto	u2597
  4318                           
  4319                           ;LCD.h: 94: PORTBbits.RB7 = 0;
  4320  0F69  1283               	bcf	3,5	;RP0=0, select bank0
  4321  0F6A  1303               	bcf	3,6	;RP1=0, select bank0
  4322  0F6B  1386               	bcf	6,7	;volatile
  4323  0F6C  0008               	return
  4324  0F6D                     __end_of_Lcd_Write_Char:	
  4325                           
  4326                           	psect	text23
  4327  0F6D                     __ptext23:	
  4328 ;; *************** function _Lcd_Set_Cursor *****************
  4329 ;; Defined at:
  4330 ;;		line 41 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  a               1    wreg     unsigned char 
  4333 ;;  b               1    4[COMMON] unsigned char 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  a               1    7[COMMON] unsigned char 
  4336 ;;  temp            1   10[COMMON] unsigned char 
  4337 ;;  y               1    9[COMMON] unsigned char 
  4338 ;;  z               1    8[COMMON] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;		None               void
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0, pclath, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4348 ;;      Params:         1       0       0       0       0
  4349 ;;      Locals:         4       0       0       0       0
  4350 ;;      Temps:          2       0       0       0       0
  4351 ;;      Totals:         7       0       0       0       0
  4352 ;;Total ram usage:        7 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    2
  4355 ;; This function calls:
  4356 ;;		_Lcd_Cmd
  4357 ;; This function is called by:
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _Lcd_Set_Cursor
  4364  0F6D                     _Lcd_Set_Cursor:	
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4368                           ;Lcd_Set_Cursor@a stored from wreg
  4369  0F6D  00F7               	movwf	Lcd_Set_Cursor@a
  4370                           
  4371                           ;LCD.h: 43: char temp,z,y;
  4372                           ;LCD.h: 44: if(a == 1)
  4373  0F6E  0877               	movf	Lcd_Set_Cursor@a,w
  4374  0F6F  3A01               	xorlw	1
  4375  0F70  1D03               	skipz
  4376  0F71  2F90               	goto	l1795
  4377                           
  4378                           ;LCD.h: 45: {
  4379                           ;LCD.h: 46: temp = 0x80 + b - 1;
  4380  0F72  0874               	movf	Lcd_Set_Cursor@b,w
  4381  0F73  3E7F               	addlw	127
  4382  0F74  00F5               	movwf	??_Lcd_Set_Cursor
  4383  0F75  0875               	movf	??_Lcd_Set_Cursor,w
  4384  0F76  00FA               	movwf	Lcd_Set_Cursor@temp
  4385                           
  4386                           ;LCD.h: 47: z = temp>>4;
  4387  0F77  087A               	movf	Lcd_Set_Cursor@temp,w
  4388  0F78  00F5               	movwf	??_Lcd_Set_Cursor
  4389  0F79  3004               	movlw	4
  4390  0F7A                     u2425:	
  4391  0F7A  1003               	clrc
  4392  0F7B  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4393  0F7C  3EFF               	addlw	-1
  4394  0F7D  1D03               	skipz
  4395  0F7E  2F7A               	goto	u2425
  4396  0F7F  0875               	movf	??_Lcd_Set_Cursor,w
  4397  0F80  00F6               	movwf	??_Lcd_Set_Cursor+1
  4398  0F81  0876               	movf	??_Lcd_Set_Cursor+1,w
  4399  0F82  00F8               	movwf	Lcd_Set_Cursor@z
  4400                           
  4401                           ;LCD.h: 48: y = temp & 0x0F;
  4402  0F83  087A               	movf	Lcd_Set_Cursor@temp,w
  4403  0F84  390F               	andlw	15
  4404  0F85  00F5               	movwf	??_Lcd_Set_Cursor
  4405  0F86  0875               	movf	??_Lcd_Set_Cursor,w
  4406  0F87  00F9               	movwf	Lcd_Set_Cursor@y
  4407                           
  4408                           ;LCD.h: 49: Lcd_Cmd(z);
  4409  0F88  0878               	movf	Lcd_Set_Cursor@z,w
  4410  0F89  158A  2648  158A   	fcall	_Lcd_Cmd
  4411                           
  4412                           ;LCD.h: 50: Lcd_Cmd(y);
  4413  0F8C  0879               	movf	Lcd_Set_Cursor@y,w
  4414  0F8D  158A  2648         	fcall	_Lcd_Cmd
  4415                           
  4416                           ;LCD.h: 51: }
  4417  0F8F  0008               	return
  4418  0F90                     l1795:	
  4419                           
  4420                           ;LCD.h: 52: else if(a == 2)
  4421  0F90  0877               	movf	Lcd_Set_Cursor@a,w
  4422  0F91  3A02               	xorlw	2
  4423  0F92  1D03               	skipz
  4424  0F93  0008               	return
  4425                           
  4426                           ;LCD.h: 53: {
  4427                           ;LCD.h: 54: temp = 0xC0 + b - 1;
  4428  0F94  0874               	movf	Lcd_Set_Cursor@b,w
  4429  0F95  3EBF               	addlw	191
  4430  0F96  00F5               	movwf	??_Lcd_Set_Cursor
  4431  0F97  0875               	movf	??_Lcd_Set_Cursor,w
  4432  0F98  00FA               	movwf	Lcd_Set_Cursor@temp
  4433                           
  4434                           ;LCD.h: 55: z = temp>>4;
  4435  0F99  087A               	movf	Lcd_Set_Cursor@temp,w
  4436  0F9A  00F5               	movwf	??_Lcd_Set_Cursor
  4437  0F9B  3004               	movlw	4
  4438  0F9C                     u2445:	
  4439  0F9C  1003               	clrc
  4440  0F9D  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4441  0F9E  3EFF               	addlw	-1
  4442  0F9F  1D03               	skipz
  4443  0FA0  2F9C               	goto	u2445
  4444  0FA1  0875               	movf	??_Lcd_Set_Cursor,w
  4445  0FA2  00F6               	movwf	??_Lcd_Set_Cursor+1
  4446  0FA3  0876               	movf	??_Lcd_Set_Cursor+1,w
  4447  0FA4  00F8               	movwf	Lcd_Set_Cursor@z
  4448                           
  4449                           ;LCD.h: 56: y = temp & 0x0F;
  4450  0FA5  087A               	movf	Lcd_Set_Cursor@temp,w
  4451  0FA6  390F               	andlw	15
  4452  0FA7  00F5               	movwf	??_Lcd_Set_Cursor
  4453  0FA8  0875               	movf	??_Lcd_Set_Cursor,w
  4454  0FA9  00F9               	movwf	Lcd_Set_Cursor@y
  4455                           
  4456                           ;LCD.h: 57: Lcd_Cmd(z);
  4457  0FAA  0878               	movf	Lcd_Set_Cursor@z,w
  4458  0FAB  158A  2648  158A   	fcall	_Lcd_Cmd
  4459                           
  4460                           ;LCD.h: 58: Lcd_Cmd(y);
  4461  0FAE  0879               	movf	Lcd_Set_Cursor@y,w
  4462  0FAF  158A  2648         	fcall	_Lcd_Cmd
  4463  0FB1  0008               	return
  4464  0FB2                     __end_of_Lcd_Set_Cursor:	
  4465                           
  4466                           	psect	text24
  4467  0007                     __ptext24:	
  4468 ;; *************** function _Lcd_Init *****************
  4469 ;; Defined at:
  4470 ;;		line 62 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;		None
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;		None
  4475 ;; Return value:  Size  Location     Type
  4476 ;;		None               void
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0, pclath, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4484 ;;      Params:         0       0       0       0       0
  4485 ;;      Locals:         0       0       0       0       0
  4486 ;;      Temps:          2       0       0       0       0
  4487 ;;      Totals:         2       0       0       0       0
  4488 ;;Total ram usage:        2 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    2
  4491 ;; This function calls:
  4492 ;;		_Lcd_Cmd
  4493 ;;		_Lcd_Port
  4494 ;; This function is called by:
  4495 ;;		_main
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           
  4500                           ;psect for function _Lcd_Init
  4501  0007                     _Lcd_Init:	
  4502                           
  4503                           ;LCD.h: 64: Lcd_Port(0x00);
  4504                           
  4505                           ;incstack = 0
  4506                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4507  0007  3000               	movlw	0
  4508  0008  158A  2660  118A   	fcall	_Lcd_Port
  4509                           
  4510                           ;LCD.h: 65: _delay((unsigned long)((20)*(4000000/4000.0)));
  4511  000B  301A               	movlw	26
  4512  000C  00F5               	movwf	??_Lcd_Init+1
  4513  000D  30F8               	movlw	248
  4514  000E  00F4               	movwf	??_Lcd_Init
  4515  000F                     u2607:	
  4516  000F  0BF4               	decfsz	??_Lcd_Init,f
  4517  0010  280F               	goto	u2607
  4518  0011  0BF5               	decfsz	??_Lcd_Init+1,f
  4519  0012  280F               	goto	u2607
  4520  0013  0000               	nop
  4521                           
  4522                           ;LCD.h: 66: Lcd_Cmd(0x03);
  4523  0014  3003               	movlw	3
  4524  0015  158A  2648  118A   	fcall	_Lcd_Cmd
  4525                           
  4526                           ;LCD.h: 67: _delay((unsigned long)((5)*(4000000/4000.0)));
  4527  0018  3007               	movlw	7
  4528  0019  00F5               	movwf	??_Lcd_Init+1
  4529  001A  307D               	movlw	125
  4530  001B  00F4               	movwf	??_Lcd_Init
  4531  001C                     u2617:	
  4532  001C  0BF4               	decfsz	??_Lcd_Init,f
  4533  001D  281C               	goto	u2617
  4534  001E  0BF5               	decfsz	??_Lcd_Init+1,f
  4535  001F  281C               	goto	u2617
  4536                           
  4537                           ;LCD.h: 68: Lcd_Cmd(0x03);
  4538  0020  3003               	movlw	3
  4539  0021  158A  2648  118A   	fcall	_Lcd_Cmd
  4540                           
  4541                           ;LCD.h: 69: _delay((unsigned long)((11)*(4000000/4000.0)));
  4542  0024  300F               	movlw	15
  4543  0025  00F5               	movwf	??_Lcd_Init+1
  4544  0026  3047               	movlw	71
  4545  0027  00F4               	movwf	??_Lcd_Init
  4546  0028                     u2627:	
  4547  0028  0BF4               	decfsz	??_Lcd_Init,f
  4548  0029  2828               	goto	u2627
  4549  002A  0BF5               	decfsz	??_Lcd_Init+1,f
  4550  002B  2828               	goto	u2627
  4551  002C  282D               	nop2
  4552                           
  4553                           ;LCD.h: 70: Lcd_Cmd(0x03);
  4554  002D  3003               	movlw	3
  4555  002E  158A  2648  118A   	fcall	_Lcd_Cmd
  4556                           
  4557                           ;LCD.h: 72: Lcd_Cmd(0x02);
  4558  0031  3002               	movlw	2
  4559  0032  158A  2648  118A   	fcall	_Lcd_Cmd
  4560                           
  4561                           ;LCD.h: 73: Lcd_Cmd(0x02);
  4562  0035  3002               	movlw	2
  4563  0036  158A  2648  118A   	fcall	_Lcd_Cmd
  4564                           
  4565                           ;LCD.h: 74: Lcd_Cmd(0x08);
  4566  0039  3008               	movlw	8
  4567  003A  158A  2648  118A   	fcall	_Lcd_Cmd
  4568                           
  4569                           ;LCD.h: 75: Lcd_Cmd(0x00);
  4570  003D  3000               	movlw	0
  4571  003E  158A  2648  118A   	fcall	_Lcd_Cmd
  4572                           
  4573                           ;LCD.h: 76: Lcd_Cmd(0x0C);
  4574  0041  300C               	movlw	12
  4575  0042  158A  2648  118A   	fcall	_Lcd_Cmd
  4576                           
  4577                           ;LCD.h: 77: Lcd_Cmd(0x00);
  4578  0045  3000               	movlw	0
  4579  0046  158A  2648  118A   	fcall	_Lcd_Cmd
  4580                           
  4581                           ;LCD.h: 78: Lcd_Cmd(0x06);
  4582  0049  3006               	movlw	6
  4583  004A  158A  2648         	fcall	_Lcd_Cmd
  4584  004C  0008               	return
  4585  004D                     __end_of_Lcd_Init:	
  4586                           
  4587                           	psect	text25
  4588  0E02                     __ptext25:	
  4589 ;; *************** function _Lcd_Clear *****************
  4590 ;; Defined at:
  4591 ;;		line 35 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2   57[COMMON] int 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0, pclath, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4605 ;;      Params:         0       0       0       0       0
  4606 ;;      Locals:         0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0
  4608 ;;      Totals:         0       0       0       0       0
  4609 ;;Total ram usage:        0 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    2
  4612 ;; This function calls:
  4613 ;;		_Lcd_Cmd
  4614 ;; This function is called by:
  4615 ;;		_main
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           
  4620                           ;psect for function _Lcd_Clear
  4621  0E02                     _Lcd_Clear:	
  4622                           
  4623                           ;LCD.h: 37: Lcd_Cmd(0);
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4627  0E02  3000               	movlw	0
  4628  0E03  158A  2648  158A   	fcall	_Lcd_Cmd
  4629                           
  4630                           ;LCD.h: 38: Lcd_Cmd(1);
  4631  0E06  3001               	movlw	1
  4632  0E07  158A  2648         	fcall	_Lcd_Cmd
  4633  0E09  0008               	return
  4634  0E0A                     __end_of_Lcd_Clear:	
  4635                           
  4636                           	psect	text26
  4637  0E48                     __ptext26:	
  4638 ;; *************** function _Lcd_Cmd *****************
  4639 ;; Defined at:
  4640 ;;		line 26 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  a               1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  a               1    3[COMMON] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;		None               void
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, pclath, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4654 ;;      Params:         0       0       0       0       0
  4655 ;;      Locals:         1       0       0       0       0
  4656 ;;      Temps:          2       0       0       0       0
  4657 ;;      Totals:         3       0       0       0       0
  4658 ;;Total ram usage:        3 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    1
  4661 ;; This function calls:
  4662 ;;		_Lcd_Port
  4663 ;; This function is called by:
  4664 ;;		_Lcd_Clear
  4665 ;;		_Lcd_Set_Cursor
  4666 ;;		_Lcd_Init
  4667 ;;		_Lcd_Shift_Right
  4668 ;;		_Lcd_Shift_Left
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _Lcd_Cmd
  4674  0E48                     _Lcd_Cmd:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4678                           ;Lcd_Cmd@a stored from wreg
  4679  0E48  00F3               	movwf	Lcd_Cmd@a
  4680                           
  4681                           ;LCD.h: 28: PORTBbits.RB6 = 0;
  4682  0E49  1283               	bcf	3,5	;RP0=0, select bank0
  4683  0E4A  1303               	bcf	3,6	;RP1=0, select bank0
  4684  0E4B  1306               	bcf	6,6	;volatile
  4685                           
  4686                           ;LCD.h: 29: Lcd_Port(a);
  4687  0E4C  0873               	movf	Lcd_Cmd@a,w
  4688  0E4D  158A  2660  158A   	fcall	_Lcd_Port
  4689                           
  4690                           ;LCD.h: 30: PORTBbits.RB7 = 1;
  4691  0E50  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0E51  1303               	bcf	3,6	;RP1=0, select bank0
  4693  0E52  1786               	bsf	6,7	;volatile
  4694                           
  4695                           ;LCD.h: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  4696  0E53  3006               	movlw	6
  4697  0E54  00F2               	movwf	??_Lcd_Cmd+1
  4698  0E55  3030               	movlw	48
  4699  0E56  00F1               	movwf	??_Lcd_Cmd
  4700  0E57                     u2637:	
  4701  0E57  0BF1               	decfsz	??_Lcd_Cmd,f
  4702  0E58  2E57               	goto	u2637
  4703  0E59  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4704  0E5A  2E57               	goto	u2637
  4705  0E5B  0000               	nop
  4706                           
  4707                           ;LCD.h: 32: PORTBbits.RB7 = 0;
  4708  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  4709  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  4710  0E5E  1386               	bcf	6,7	;volatile
  4711  0E5F  0008               	return
  4712  0E60                     __end_of_Lcd_Cmd:	
  4713                           
  4714                           	psect	text27
  4715  0E60                     __ptext27:	
  4716 ;; *************** function _Lcd_Port *****************
  4717 ;; Defined at:
  4718 ;;		line 4 in file "F:\PROJECTS\PROGRAMMING\16F88-ADC-LCD-XC8\FIRMWARE\PIC16F88\src\LCD.h"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  a               1    wreg     unsigned char 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  a               1    0[COMMON] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;		None               void
  4725 ;; Registers used:
  4726 ;;		wreg
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4732 ;;      Params:         0       0       0       0       0
  4733 ;;      Locals:         1       0       0       0       0
  4734 ;;      Temps:          0       0       0       0       0
  4735 ;;      Totals:         1       0       0       0       0
  4736 ;;Total ram usage:        1 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_Lcd_Cmd
  4742 ;;		_Lcd_Init
  4743 ;;		_Lcd_Write_Char
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           
  4748                           ;psect for function _Lcd_Port
  4749  0E60                     _Lcd_Port:	
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in _Lcd_Port: [wreg]
  4753                           ;Lcd_Port@a stored from wreg
  4754  0E60  00F0               	movwf	Lcd_Port@a
  4755                           
  4756                           ;LCD.h: 6: if(a & 1)
  4757  0E61  1C70               	btfss	Lcd_Port@a,0
  4758  0E62  2E67               	goto	l44
  4759                           
  4760                           ;LCD.h: 7: PORTBbits.RB2 = 1;
  4761  0E63  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0E64  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0E65  1506               	bsf	6,2	;volatile
  4764  0E66  2E6A               	goto	l45
  4765  0E67                     l44:	
  4766                           
  4767                           ;LCD.h: 8: else
  4768                           ;LCD.h: 9: PORTBbits.RB2 = 0;
  4769  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  4770  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  4771  0E69  1106               	bcf	6,2	;volatile
  4772  0E6A                     l45:	
  4773                           
  4774                           ;LCD.h: 11: if(a & 2)
  4775  0E6A  1CF0               	btfss	Lcd_Port@a,1
  4776  0E6B  2E6E               	goto	l46
  4777                           
  4778                           ;LCD.h: 12: PORTBbits.RB3 = 1;
  4779  0E6C  1586               	bsf	6,3	;volatile
  4780  0E6D  2E6F               	goto	l47
  4781  0E6E                     l46:	
  4782                           
  4783                           ;LCD.h: 13: else
  4784                           ;LCD.h: 14: PORTBbits.RB3 = 0;
  4785  0E6E  1186               	bcf	6,3	;volatile
  4786  0E6F                     l47:	
  4787                           
  4788                           ;LCD.h: 16: if(a & 4)
  4789  0E6F  1D70               	btfss	Lcd_Port@a,2
  4790  0E70  2E73               	goto	l48
  4791                           
  4792                           ;LCD.h: 17: PORTBbits.RB4 = 1;
  4793  0E71  1606               	bsf	6,4	;volatile
  4794  0E72  2E74               	goto	l49
  4795  0E73                     l48:	
  4796                           
  4797                           ;LCD.h: 18: else
  4798                           ;LCD.h: 19: PORTBbits.RB4 = 0;
  4799  0E73  1206               	bcf	6,4	;volatile
  4800  0E74                     l49:	
  4801                           
  4802                           ;LCD.h: 21: if(a & 8)
  4803  0E74  1DF0               	btfss	Lcd_Port@a,3
  4804  0E75  2E78               	goto	l50
  4805                           
  4806                           ;LCD.h: 22: PORTBbits.RB5 = 1;
  4807  0E76  1686               	bsf	6,5	;volatile
  4808  0E77  0008               	return
  4809  0E78                     l50:	
  4810                           
  4811                           ;LCD.h: 23: else
  4812                           ;LCD.h: 24: PORTBbits.RB5 = 0;
  4813  0E78  1286               	bcf	6,5	;volatile
  4814  0E79  0008               	return
  4815  0E7A                     __end_of_Lcd_Port:	
  4816  007E                     btemp	set	126	;btemp
  4817  007E                     wtemp	set	126
  4818  007E                     wtemp0	set	126
  4819  0080                     wtemp1	set	128
  4820  0082                     wtemp2	set	130
  4821  0084                     wtemp3	set	132
  4822  0086                     wtemp4	set	134
  4823  0088                     wtemp5	set	136
  4824  007F                     wtemp6	set	127
  4825  007E                     ttemp	set	126
  4826  007E                     ttemp0	set	126
  4827  0081                     ttemp1	set	129
  4828  0084                     ttemp2	set	132
  4829  0087                     ttemp3	set	135
  4830  007F                     ttemp4	set	127
  4831  007E                     ltemp	set	126
  4832  007E                     ltemp0	set	126
  4833  0082                     ltemp1	set	130
  4834  0086                     ltemp2	set	134
  4835  0080                     ltemp3	set	128


Data Sizes:
    Strings     11
    Constant    40
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     64      64
    BANK1            80      0      17
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S311$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _main->___ftadd
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftdiv->___ftadd

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   20357
                                             50 BANK0     14    14      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                               _ftoa
                  _getADC10bitResult
                            _initADC
                  _initADCConversion
               _isADCConversionReady
 ---------------------------------------------------------------------------------
 (1) _isADCConversionReady                                 2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initADCConversion                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getADC10bitResult                                    7     5      2      25
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _ftoa                                                14    10      4   10014
                                             36 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26    17      9    1896
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     265
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1846
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     358
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2927
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2776
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     151
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2262
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     242
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2110
                                              7 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             6     3      3    1868
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1724
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     295
                                              5 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     433
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awtoft
     ___ftpack
   ___ftadd
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftneg
   _ftoa
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _isdigit
   _getADC10bitResult
   _initADC
   _initADCConversion
   _isADCConversionReady

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      5F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     40      40       5       80.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      11       7       21.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      5F      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Mar 02 02:35:48 2015

                            pc 0002                    __CFG_CP$OFF 0000                             l50 0E78  
                           l44 0E67                             l45 0E6A                             l46 0E6E  
                           l47 0E6F                             l48 0E73                             l49 0E74  
                           fsr 0004            ___wmul@multiplicand 0072                   ___ftadd@exp1 0026  
                 ___ftadd@exp2 0025                   ___ftadd@sign 0024                            l120 06BA  
                          l117 069E                            l223 0EF7                            l413 058B  
                          l390 0157                            l384 013E                   __CFG_CPD$OFF 0000  
                          fsr0 0004                            indf 0000                   __CFG_FOSC$XT 0000  
                 __CFG_LVP$OFF 0000                   ___ftdiv@cntr 0031                   ___ftdiv@sign 0036  
                         l1301 0123                           l1311 014D                           l1303 0128  
                         l1403 057B                           l1309 0143                           l1413 05AF  
                         l1405 0587                           l1423 05D2                           l1409 059D  
                         l1433 00BA                           l1345 0EEF                           l1601 07F2  
                         l1363 050C                           l1443 00F2                           l1435 00CA  
                         l1339 0E32                           l1515 061F                           l1523 0655  
                         l1613 009B                           l1373 0522                           l1541 06A5  
                         l1533 0665                           l1509 060E                           l1295 0110  
                         l1631 0429                           l1391 0551                           l1367 0513  
                         l1447 00FF                           l1463 0FEA                           l1535 0699  
                         l1609 0074                           l1393 055D                           l1385 053C  
                         l1721 01D9                           l1713 01BC                           l1457 0FBC  
                         l1561 06F4                           l1537 06A0                           l1299 0117  
                         l1395 0562                           l1723 01E4                           l1715 01CC  
                         l1459 0FCC                           l1467 0FF7                           l1547 06CC  
                         l1821 0EB3                           l1661 04A6                           l1653 048E  
                         l1637 043F                           l1397 0566                           l1725 01E7  
                         l1581 077B                           l1573 0740                           l1557 06EE  
                         l1591 0795                           l1583 077F                           l1665 04B6  
                         l1649 047E                           l1729 01F5                           l1737 0F14  
                         l1577 075A                           l1569 0728                           l1833 0233  
                         l1739 0F26                           l1771 0E23                           l1853 0ED7  
                         l1597 07E3                           l1863 0372                           l1695 018A  
                         l1599 05F0                           l1945 02CD                           l1795 0F90  
                         l1891 03EC                           l1883 03CD                           l1947 02D0  
                         l1869 0388                           STR_1 082E                           u2005 0737  
                         u2111 008E                           u2015 0751                           u2112 008F  
                         u2113 0094                           u2025 076B                           u2114 0095  
                         u1315 011C                           u2205 0497                           u1335 0137  
                         u2055 07A0                           u2065 07EF                           u1355 0146  
                         u2091 0067                           u2155 044B                           u2092 0068  
                         u2093 006D                           u2245 04B7                           u2165 045D  
                         u2325 01BD                           u2094 006E                           u2255 04BF  
                         u2425 0F7A                           u1385 015E                           u2505 039A  
                         u1625 0552                           u2515 03AC                           u2195 048F  
                         u2355 01DB                           u1475 0EF8                           u2445 0F9C  
                         u2525 03CE                           u1485 0EFF                           u2607 000F  
                         u2535 03DF                           u1655 0567                           u2295 0191  
                         u2617 001C                           u2545 03ED                           u2385 0F19  
                         u1825 0FC0                           u2627 0028                           u1595 053D  
                         u1755 00BE                           u2637 0E57                           u1685 057C  
                         u1845 0FDA                           u1775 00CC                           u1855 0FEB  
                         u1785 00E1                           u2577 0E44                           u2587 0F59  
                         u1875 0F4B                           u1795 00F3                           u2597 0F67  
                         u1975 06F7                           u1985 071E                   __CFG_WRT$OFF 0000  
            ?_Lcd_Write_String 0070                           _main 02A9                           _ftoa 01FE  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073                           btemp 007E  
                __CFG_BOREN$ON 0000                           ltemp 007E                           start 0000  
                         ttemp 007E             ??_Lcd_Write_String 0075                           wtemp 007E  
                __CFG_IESO$OFF 0000                __end_of_Lcd_Cmd 0E60                  __CFG_MCLRE$ON 0000  
                 ___ftmul@cntr 002E                   ___ftmul@sign 002F                   ___fttol@exp1 003D  
                 ___fttol@lval 0039                          ?_main 0070                          ?_ftoa 0044  
              __end_of___ftadd 05E9                  __CFG_WDTE$OFF 0000                __end_of___ftdiv 0411  
              __end_of___ftneg 0E12                          _ANSEL 009B                __end_of___lldiv 0108  
              __end_of___ftmul 04E3                __end_of___llmod 1000                __end_of___ftsub 0E95  
              __end_of___fttol 01FE                   main@maxValue 0055                          _PORTA 0005  
                        _PORTB 0006                   main@minValue 0052        __size_of_Lcd_Set_Cursor 0045  
               __CFG_CCPMX$RB0 0000                  __CFG_PWRTE$ON 0000                   ___lltoft@exp 007D  
               __CFG_FCMEN$OFF 0000                __end_of_initADC 0E48                  ___awtoft@sign 007D  
              __end_of_dpowers 082E                __end_of_isdigit 0E34                  ___ftpack@sign 0074  
                        ftoa@f 0044                          ftoa@l 004D                          pclath 000A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080           _isADCConversionReady 0E1A                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 07F7               __end_of_Lcd_Init 004D               __end_of_Lcd_Port 0E7A  
              __initialization 07F7                   __end_of_main 035A                   __end_of_ftoa 02A9  
                       ??_main 007E                         ??_ftoa 0048                  ___fttol@sign1 0038  
           __size_of_Lcd_Clear 0008                         _ADCON1 009F               ___llmod@dividend 0024  
                       _ADRESH 001E                         _ADRESL 009E               __end_of___awtoft 0EED  
             __end_of___ftpack 0170               __end_of___lltoft 0F3A          ?_isADCConversionReady 0070  
                    ??_Lcd_Cmd 0071        __size_of_Lcd_Write_Char 0033                         ___ftge 004D  
                       ___wmul 0EED                      ??___ftadd 0020                      ??___ftdiv 002D  
                    ??___ftneg 0073                      ??___lldiv 0078                      ??___ftmul 0026  
                    ??___llmod 0028                      ??___ftsub 007E                      ??___fttol 0034  
                       ftoa@cp 0051                      ??_initADC 0070          ___ftmul@f3_as_product 002B  
                    ??_isdigit 0070                  main@unitValue 0058                      ??_sprintf 0033  
              Lcd_Set_Cursor@a 0077                Lcd_Set_Cursor@b 0074                Lcd_Set_Cursor@y 0079  
              Lcd_Set_Cursor@z 0078        __end_of__initialization 07FD                     ___ftadd@f1 0078  
                   ___ftadd@f2 007B                     ___ftge@ff1 0070                     ___ftge@ff2 0073  
            __end_of_Lcd_Clear 0E0A                     ___ftdiv@f1 002A                     ___ftdiv@f2 0027  
                   ___ftdiv@f3 0032                     ___ftneg@f1 0070                     ___awtoft@c 0078  
                   ___ftmul@f1 0020                     ___ftmul@f2 0023                     ___ftsub@f1 002A  
                   ___ftsub@f2 0027                     ___fttol@f1 0030                 __pcstackCOMMON 0070  
                   ___lltoft@c 0078                 _Lcd_Set_Cursor 0F6D                      ?_Lcd_Init 0070  
                    ?_Lcd_Port 0070         ??_isADCConversionReady 0072                   sprintf@width 003F  
                   __pbssBANK1 00A0              _getADC10bitResult 0E95             ?_getADC10bitResult 0070  
                   __pmaintext 02A9                        ?___ftge 0070                        ?___wmul 0070  
          ??_getADC10bitResult 0072      __size_of_Lcd_Write_String 001D                      ?___awtoft 0078  
                    ?___ftpack 0070         __end_of_Lcd_Set_Cursor 0FB2                      ?___lltoft 0078  
                   ??_Lcd_Init 0074                     ??_Lcd_Port 0070                     __stringtab 0800  
    __end_of_getADC10bitResult 0EB0                 _Lcd_Write_Char 0F3A                        _Lcd_Cmd 0E48  
              __size_of___ftge 005D                        ___ftadd 04E3                        ___ftdiv 035A  
                      ___ftneg 0E0A                        ___lldiv 00AA                __size_of___wmul 0023  
                      ___ftmul 0411                        ___llmod 0FB2                        ___ftsub 0E7A  
                      ___fttol 0170                     ??___awtoft 007B                     ??___ftpack 0075  
              ?_Lcd_Set_Cursor 0074                     ??___lltoft 007C                        __ptext1 0E1A  
                      __ptext2 0003                        __ptext3 0E34                        __ptext4 0E95  
                      __ptext5 01FE                        __ptext6 05E9                        __ptext7 0E26  
                      __ptext8 0EED                        __ptext9 0FB2                        _initADC 0E34  
                      _dpowers 0806                        _isdigit 0E26                        _sprintf 05E9  
                      clrloop0 0E13         __end_of_Lcd_Write_Char 0F6D           end_of_initialization 07FD  
                      ftoa@buf 00A0                        ftoa@rem 0049                ___lldiv@divisor 0070  
              ___lldiv@counter 007D                      Lcd_Port@a 0070                      _PORTBbits 0006  
                    _TRISAbits 0085                      _TRISBbits 0086                ?_Lcd_Write_Char 0070  
            Lcd_Write_String@a 0078              Lcd_Write_String@i 0076     __size_of_getADC10bitResult 001B  
             main@currentValue 005B                    ___ftdiv@exp 0035                     main@result 005E  
                  ___ftmul@exp 002A                      _Lcd_Clear 0E02                 __end_of___ftge 00AA  
               __end_of___wmul 0F10               _Lcd_Write_String 0EB0            start_initialization 07F7  
                   ftoa@status 0047              __size_of_Lcd_Init 0046              __size_of_Lcd_Port 001A  
              ___llmod@divisor 0020                ___llmod@counter 0029                     ?_Lcd_Clear 0070  
                     ??___ftge 0076                       ??___wmul 0074                Lcd_Write_Char@a 0074  
              Lcd_Write_Char@y 0073              __size_of___awtoft 0020              __size_of___ftpack 0068  
            __size_of___lltoft 002A                      ___latbits 0001                  __pcstackBANK0 0020  
          __end_of__stringdata 0839  __size_of_isADCConversionReady 000C                       ?_Lcd_Cmd 0070  
                  sprintf@_val 003A                    sprintf@flag 0038                    sprintf@prec 0041  
             ??_Lcd_Set_Cursor 0075              _initADCConversion 0003                       ?___ftadd 0078  
                     ?___ftdiv 0027                       ?___ftneg 0070                       ?___lldiv 0070  
                     ?___ftmul 0020                       ?___llmod 0020                       ?___ftsub 0027  
                     ?___fttol 0030             ?_initADCConversion 0070                      __pstrings 0800  
                     ?_initADC 0070            ??_initADCConversion 0070                       ?_isdigit 0070  
                     ?_sprintf 002A                 ___wmul@product 0074                      clear_ram0 0E12  
    __end_of_initADCConversion 0007                       Lcd_Cmd@a 0073                    ??_Lcd_Clear 0074  
                   _ADCON0bits 001F                    __stringbase 0805                     _ADCON1bits 009F  
                  __stringdata 082E              ___wmul@multiplier 0070               ??_Lcd_Write_Char 0071  
                     _Lcd_Init 0007                       _Lcd_Port 0E60       __end_of_Lcd_Write_String 0ECD  
             __size_of_Lcd_Cmd 0018               __size_of___ftadd 0106               __size_of___ftdiv 00B7  
             __size_of___ftneg 0008               __size_of___lldiv 005E               __size_of___ftmul 00D2  
             __size_of___llmod 004E               __size_of___ftsub 001B               __size_of___fttol 008E  
                     ___awtoft 0ECD                       ___ftpack 0108             __end_of__stringtab 0806  
                     ___lltoft 0F10                    _isdigit$519 0070               __size_of_initADC 0014  
             __size_of_isdigit 000E                       __ptext10 00AA                       __ptext11 0F10  
                     __ptext20 0108                       __ptext12 0170                       __ptext21 0EB0  
                     __ptext13 0E7A                       __ptext22 0F3A                       __ptext14 04E3  
                     __ptext23 0F6D                       __ptext15 0E0A                       __ptext24 0007  
                     __ptext16 0411                       __ptext25 0E02                       __ptext17 004D  
                     __ptext26 0E48                       __ptext18 035A                       __ptext27 0E60  
                     __ptext19 0ECD               __size_of_sprintf 020E                  __size_of_main 00B1  
                __size_of_ftoa 00AB     __size_of_initADCConversion 0004                       isdigit@c 0071  
           Lcd_Write_Char@temp 0072                      sprintf@ap 0039                      sprintf@sp 003E  
             ___lldiv@dividend 0074                      stringcode 0800                     _OSCCONbits 008F  
 __end_of_isADCConversionReady 0E26             Lcd_Set_Cursor@temp 007A                       sprintf@c 0043  
                     sprintf@f 002A               ___lldiv@quotient 0079                       stringdir 0800  
                     stringtab 0800        getADC10bitResult@adresh 0074        getADC10bitResult@adresl 0073  
      getADC10bitResult@result 0075  
